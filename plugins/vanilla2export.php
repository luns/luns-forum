<?php /* This file was automatically generated by make.php. DO NOT EDIT. */ ?>

<?php
/**
 * Vanilla 2 Exporter
 * 
 * This script exports other forum databases to the Vanilla 2 import format.
 * To use this script, copy it to your web server and open it in your browser.
 * If you have a large database, make the directory writable so that the export file can be saved locally and zipped.
 *
 * @copyright 2010 Vanilla Forums Inc.
 * @license GNU GPLv2
 * @package VanillaPorter
 */
define('APPLICATION', 'Porter');
define('APPLICATION_VERSION', '1.7');

if(TRUE || defined('DEBUG'))
   error_reporting(E_ALL);
else
   error_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR);
ini_set('display_errors', 'on');
ini_set('track_errors', 1);
 
global $Supported;

/** @var array Supported forum packages: classname => array(name, prefix) */
$Supported = array(
   'vanilla1' => array('name'=> 'Vanilla 1.*', 'prefix'=>'LUM_'),
   'vanilla2' => array('name'=> 'Vanilla 2.*', 'prefix'=>'GDN_'),
   'vbulletin' => array('name'=>'vBulletin 3.* and 4.*', 'prefix'=>'vb_'),
   'phpbb2' => array('name'=>'phpBB 2.*', 'prefix' => 'phpbb_'),
   'phpbb3' => array('name'=>'phpBB 3.*', 'prefix' => 'phpbb_'),
   'bbPress' => array('name'=>'bbPress 1.*', 'prefix' => 'bb_'),
   'SimplePress' => array('name'=>'SimplePress 1.*', 'prefix' => 'wp_'),
   'SMF' => array('name'=>'SMF (Simple Machines) 1.*', 'prefix' => 'smf_'),
   'punbb' => array('name'=>'PunBB 1.*', 'prefix' => 'punbb_')
);

// Support Files

/* Contents included from class.exportmodel.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Object for exporting other database structures into a format that can be imported.
 */
class ExportModel {
   const COMMENT = '//';
   const DELIM = ',';
   const ESCAPE = '\\';
   const NEWLINE = "\n";
   const NULL = '\N';
   const QUOTE = '"';

   public $CaptureOnly = FALSE;

   /** @var array Any comments that have been written during the export. */
   public $Comments = array();

   /** @var ExportController **/
   public $Controller = NULL;

   /** @var string The charcter set to set as the connection anytime the database connects. */
   public $CharacterSet = 'utf8';
   
   /**
    * @var int The chunk size when exporting large tables.
    */
   public $ChunkSize = 100000;

   /** @var array **/
   public $CurrentRow = NULL;

   public $Destination = 'file';
   
   public $DestPrefix = 'GDN_z';

   /** @var object File pointer */
   protected $_File = NULL;

   /** @var string A prefix to put into an automatically generated filename. */
   public $FilenamePrefix = '';

   public $_Host;

   /** @var object PDO instance */
   protected $_PDO = NULL;

   protected $_Password;

   /** @var string The path to the export file. */
   public $Path = '';

   /**
    * @var string The database prefix. When you pass a sql string to ExportTable() it will replace occurances of :_ with this property.
    * @see ExportModel::ExportTable()
    */
   public $Prefix = '';

   public $Queries = array();
   
   protected $_QueryStructures = array();

   /** @var string The path to the source of the export in the case where a file is being converted. */
   public $SourcePath = '';
   
   /**
    * @var string 
    */
   public $SourcePrefix = '';
   
   public $ScriptCreateTable = TRUE;

   /**
    * @var array Strucutes that define the format of the export tables.
    */
   protected $_Structures = array(
      'Activity' => array(
            'ActivityType' => 'varchar(20)',
            'ActivityUserID' => 'int',
            'RegardingUserID' => 'int',
            'NotifyUserID' => 'int',
            'HeadlineFormat' => 'varchar(255)',
            'Story' => 'text',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'),
      'Category' => array(
            'CategoryID' => 'int',
            'Name' => 'varchar(30)',
            'UrlCode' => 'varchar(255)',
            'Description' => 'varchar(250)',
            'ParentCategoryID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Sort' => 'int',
            'Archived' => 'tinyint(1)'),
      'Comment' => array(
            'CommentID' => 'int',
            'DiscussionID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'UpdateIPAddress' => 'varchar(15)',
            'Format' => 'varchar(20)',
            'Body' => 'text',
            'Score' => 'float'),
      'Conversation' => array(
            'ConversationID' => 'int',
            'Subject' => 'varchar(255)',
            'FirstMessageID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'),
      'ConversationMessage' => array(
            'MessageID' => 'int',
            'ConversationID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'),
      'Discussion' => array(
            'DiscussionID' => 'int',
            'Name' => 'varchar(100)',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'CategoryID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'UpdateIPAddress' => 'varchar(15)',
            'DateLastComment' => 'datetime',
            'CountComments' => 'int',
            'CountViews' => 'int',
            'Score' => 'float',
            'Closed' => 'tinyint',
            'Announce' => 'tinyint',
            'Sink' => 'tinyint'),
      'Media' => array(
            'MediaID' => 'int',
            'Name' => 'varchar(255)',
            'Type' => 'varchar(128)',
            'Size' => 'int',
            'StorageMethod' => 'varchar(24)',
            'Path' => 'varchar(255)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'ForeignID' => 'int',
            'ForeignTable' => 'varchar(24)',
            'ImageWidth' => 'int',
            'ImageHeight' => 'int'
          ),
      'Permission' => array(
            'RoleID' => 'int',
            '_Permissions' => 'varchar(255)',
            'Garden.SignIn.Allow' => 'tinyint',
            'Garden.Activity.View' => 'tinyint',
            'Garden.Profiles.View' => 'tinyint',
            'Vanilla.Discussions.View' => 'tinyint',
            'Vanilla.Discussions.Add' => 'tinyint',
            'Vanilla.Comments.Add' => 'tinyint'
          ),
      'Role' => array(
            'RoleID' => 'int',
            'Name' => 'varchar(100)',
            'Description' => 'varchar(200)',
            'CanSession' => 'tinyint'),
      'Tag' => array(
            'TagID' => 'int',
            'Name' => 'varchar(255)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime'),
      'TagDiscussion' => array(
            'TagID' => 'int',
            'DiscussionID' => 'int'),
      'User' => array(
            'UserID' => 'int',
            'Name' => 'varchar(20)',
            'Email' => 'varchar(200)',
            'Password' => 'varbinary(100)',
            'HashMethod' => 'varchar(10)',
            //'Gender' => array('m', 'f'),
            'Title' => 'varchar(100)',
            'Location' => 'varchar(100)',
            'Score' => 'float',
            'InviteUserID' => 'int',
            'HourOffset' => 'int',
            'CountDiscussions' => 'int',
            'CountComments' => 'int',
            'DiscoveryText' => 'text',
            'Photo' => 'varchar(255)',
            'DateOfBirth' => 'datetime',
            'DateFirstVisit' => 'datetime',
            'DateLastActive' => 'datetime',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'LastIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'Banned' => 'tinyint',
            'ShowEmail' => 'tinyint'),
      'UserAuthentication' => array(
          'ForeignUserKey' => 'varchar(255)',
          'ProviderKey' => 'varchar(64)',
          'UserID' => 'varchar(11)',
          'Attributes' => 'text'
          ),
      'UserConversation' => array(
            'UserID' => 'int',
            'ConversationID' => 'int',
            'Deleted' => 'tinyint(1)',
            'LastMessageID' => 'int'),
      'UserDiscussion' => array(
            'UserID' => 'int',
            'DiscussionID' => 'int',
            'Bookmarked' => 'tinyint',
            'DateLastViewed' => 'datetime',
            'CountComments' => 'int'),
      'UserMeta' => array(
            'UserID' => 'int',
            'Name' => 'varchar(255)',
            'Value' => 'text'),
      'UserRole' => array(
            'UserID' => 'int',
            'RoleID' => 'int')
   );

   public $TestMode = FALSE;
   
   public $TestLimit = 10;

   /**
    * @var bool Whether or not to use compression when creating the file.
    */
   protected $_UseCompression = TRUE;

   protected $_Username;

   /**
    *
    * @var bool Whether or not to stream the export the the output rather than save a file.
    */
   public $UseStreaming = FALSE;


   /**
    * Create the export file and begin the export.
    * @param string $Path The path to the export file.
    * @param string $Source The source program that created the export. This may be used by the import routine to do additional processing.
    */
   public function BeginExport($Path = '', $Source = '', $Header = array()) {
      $this->Comments = array();
      $this->BeginTime = microtime(TRUE);

      if($Path)
         $this->Path = $Path;
      if(!$this->Path)
         $this->Path = 'export_'.($this->FilenamePrefix ? $this->FilenamePrefix.'_' : '').date('Y-m-d_His').'.txt'.($this->UseCompression() ? '.gz' : '');

      $fp = $this->_OpenFile();

      $Comment = 'Vanilla Export: '.$this->Version();
      
      if($Source)
         $Comment .= self::DELIM.' Source: '.$Source;
      foreach ($Header as $Key => $Value) {
         $Comment .= self::DELIM." $Key: $Value";
      }
      
      if ($this->CaptureOnly)
         $this->Comment($Comment);
      else
         fwrite($fp, $Comment.self::NEWLINE.self::NEWLINE);
     
      $this->Comment('Export Started: '.date('Y-m-d H:i:s'));

      return $fp;
   }

   /**
    * Write a comment to the export file.
    * @param string $Message The message to write.
    * @param bool $Echo Whether or not to echo the message in addition to writing it to the file.
    */
   public function Comment($Message, $Echo = TRUE) {
      if ($this->Destination == 'file')
         $Char = self::COMMENT;
      else
         $Char = '--';
         
      $Comment = $Char.' '.str_replace(self::NEWLINE, self::NEWLINE.self::COMMENT.' ', $Message).self::NEWLINE;
      
      fwrite($this->_File, $Comment);
      if($Echo)
         $this->Comments[] = $Message;
   }

   /**
    * End the export and close the export file. This method must be called if BeginExport() has been called or else the export file will not be closed.
    */
   public function EndExport() {
      $this->EndTime = microtime(TRUE);
      $this->TotalTime = $this->EndTime - $this->BeginTime;

      $this->Comment('Export Completed: '.date('Y-m-d H:i:s'));
      $this->Comment(sprintf('Elapsed Time: %s', self::FormatElapsed($this->TotalTime)));

      if ($this->TestMode || $this->Controller->Param('dumpsql') || $this->CaptureOnly) {
         $Queries = implode("\n\n", $this->Queries);
         if ($this->Destination == 'database')
            fwrite($this->_File, $Queries);
         else
            $this->Comment($Queries, TRUE);
      }
      
      if($this->UseStreaming) {
         //ob_flush();
      } else {
         if($this->UseCompression() && function_exists('gzopen'))
            gzclose($this->_File);
         else
            fclose($this->_File);
      }

      
   }

   /**
    * Export a table to the export file.
    * @param string $TableName the name of the table to export. This must correspond to one of the accepted Vanilla tables.
    * @param mixed $Query The query that will fetch the data for the export this can be one of the following:
    *  - <b>String</b>: Represents a string of SQL to execute.
    *  - <b>PDOStatement</b>: Represents an already executed query result set.
    *  - <b>Array</b>: Represents an array of associative arrays or objects containing the data in the export.
    *  @param array $Mappings Specifies mappings, if any, between the source and the export where the keys represent the source columns and the values represent Vanilla columns.
    *	  - If you specify a Vanilla column then it must be in the export structure contained in this class.
    *   - If you specify a MySQL type then the column will be added.
    *   - If you specify an array you can have the following keys: Column, and Type where Column represents the new column name and Type represents the MySQL type.
    *  For a list of the export tables and columns see $this->Structure().
    */
   public function ExportTable($TableName, $Query, $Mappings = array()) {
      $BeginTime = microtime(TRUE);

      $RowCount = $this->_ExportTable($TableName, $Query, $Mappings);

      $EndTime = microtime(TRUE);
      $Elapsed = self::FormatElapsed($BeginTime, $EndTime);
      $this->Comment("Exported Table: $TableName ($RowCount rows, $Elapsed)");
      fwrite($this->_File, self::NEWLINE);
   }
   
   protected function _ExportTableImport($TableName, $Query, $Mappings = array()) {
      // Backup the settings.
      $DestinationBak = $this->Destination;
      $this->Destination = 'file';
      
      $_FileBak = $this->_File;
      $Path = dirname(__FILE__).'/'.$TableName.'.csv';
      $this->Comment("Exporting To: $Path");
      $fp = fopen($Path, 'wb');
      $this->_File = $fp;
      
      // First export the file to a file.
      $this->_ExportTable($TableName, $Query, $Mappings, array('NoEndline' => TRUE));
      
      // Now define a table to import into.
      $this->_CreateExportTable($TableName, $Query, $Mappings);
      
      // Now load the data.
      $Sql = "load data local infile '$Path' into table {$this->DestDb}.{$this->DestPrefix}$TableName
         character set utf8
         columns terminated by ','
         optionally enclosed by '\"'
         escaped by '\\\\'
         lines terminated by '\\n'
         ignore 2 lines";
      $this->Query($Sql);
      
      // Restore the settings.
      $this->Destination = $DestinationBak;
      $this->_File = $_FileBak;
   }
   
   public function ExportBlobs($Sql, $BlobColumn, $PathColumn, $Thumbnail = FALSE) {
      $Result = $this->Query($Sql);
      if (!$Result) {
         die("Sql error: $Sql");
      }
      
      while ($Row = mysql_fetch_assoc($Result)) {
         $Path = dirname(__FILE__).'/'.$Row[$PathColumn];
         if (!file_exists(dirname($Path))) {
            $R = mkdir(dirname($Path), 0777, TRUE); 
            if (!$R)
               die("Could not create ".dirname($Path));
         }
         
         $PicPath = str_replace('/avat', '/pavat', $Path);
         $fp = fopen($PicPath, 'wb');
         fwrite($fp, $Row[$BlobColumn]);
         fclose($fp);
         
         if ($Thumbnail) {
            if ($Thumbnail === TRUE)
               $Thumbnail = 50;
            
            $ThumbPath = str_replace('/avat', '/navat', $Path);
            $this->GenerateThumbnail($PicPath, $ThumbPath, $Thumbnail, $Thumbnail);
         }
      }
   }

   protected function _ExportTable($TableName, $Query, $Mappings = array(), $Options = array()) {
      $fp = $this->_File;

      // Make sure the table is valid for export.
      if (!array_key_exists($TableName, $this->_Structures)) {
         $this->Comment("Error: $TableName is not a valid export."
            ." The valid tables for export are ". implode(", ", array_keys($this->_Structures)));
         fwrite($fp, self::NEWLINE);
         return;
      }

      if ($this->Destination == 'database') {
         $this->_ExportTableDB($TableName, $Query, $Mappings);
         return;
      }
      
      // Check for a chunked query.
      $Query = str_replace('{from}', -2000000000, $Query);
      $Query = str_replace('{to}', 2000000000, $Query);
      
      if (strpos($Query, '{from}') !== FALSE) {
         $this->_ExportTableDBChunked($TableName, $Query, $Mappings);
         return;
      }

      // If we are in test mode then limit the query.
      if ($this->TestMode && $this->TestLimit) {
         $Query = rtrim($Query, ';');
         if (stripos($Query, 'select') !== FALSE && stripos($Query, 'limit') === FALSE) {
            $Query .= " limit {$this->TestLimit}";
         }
      }

      $Structure = $this->_Structures[$TableName];

      // Set the search and replace to escape strings.
      $EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
      $EscapeReplace = array(self::ESCAPE.self::ESCAPE, self::ESCAPE.self::DELIM, self::ESCAPE.self::NEWLINE, self::ESCAPE.self::QUOTE);

      $LastID = 0;
      $IDName = 'NOTSET';
      $FirstQuery = TRUE;

      // Get the filters from the mappings.
      $Filters = array();
      foreach ($Mappings as $Column => $Mapping) {
         if (is_array($Mapping) &&isset($Mapping['Column']) && isset($Mapping['Filter'])) {
            $Filters[$Mapping['Column']] = $Mapping['Filter'];
         }
      }

      $Data = $this->Query($Query);
      $Mb = function_exists('mb_detect_encoding');

      // Loop through the data and write it to the file.
      $RowCount = 0;
      if ($Data !== FALSE) {
         while (($Row = mysql_fetch_assoc($Data)) !== FALSE) {
            $Row = (array)$Row; // export%202010-05-06%20210937.txt
            $this->CurrentRow =& $Row;
            $RowCount++;
            
            if($FirstQuery) {
               // Start with the table name.
               fwrite($fp, 'Table: '.$TableName.self::NEWLINE);

               // Get the export structure.
               $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings);

               // Build and write the table header.
               $TableHeader = $this->_GetTableHeader($ExportStructure, $Structure);

               fwrite($fp, $TableHeader.self::NEWLINE);

               $Mappings = array_flip($Mappings);

               $FirstQuery = FALSE;
            }

            $First = TRUE;

            // Loop through the columns in the export structure and grab their values from the row.
            $ExRow = array();
            foreach ($ExportStructure as $Field => $Type) {
               // Get the value of the export.
               if (array_key_exists($Field, $Row)) {
                  // The column has an exact match in the export.
                  $Value = $Row[$Field];
               } elseif (array_key_exists($Field, $Mappings) && isset($Row[$Mappings[$Field]])) {
                  // The column is mapped.
                  $Value = $Row[$Mappings[$Field]];
               } else {
                  $Value = NULL;
               }

               // Check to see if there is a callback filter.
               if (isset($Filters[$Field])) {
                  $Callback = $Filters[$Field];
                  $Row2 =& $Row;
                  $Value = call_user_func($Filters[$Field], $Value, $Field, $Row2, $Column);
                  $Row = $this->CurrentRow;
               }

               // Format the value for writing.
               if (is_null($Value)) {
                  $Value = self::NULL;
               } elseif (is_numeric($Value)) {
                  // Do nothing, formats as is.
               } elseif (is_string($Value)) {

                  // Check to see if there is a callback filter.
                  if (isset($Filters[$Field])) {
                     //$Value = call_user_func($Filters[$Field], $Value, $Field, $Row);
                  } else {
                     if($Mb && mb_detect_encoding($Value) != 'UTF-8')
                        $Value = utf8_encode($Value);
                  }

                  $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
                  $Value = self::QUOTE
                     .str_replace($EscapeSearch, $EscapeReplace, $Value)
                     .self::QUOTE;
               } elseif (is_bool($Value)) {
                  $Value = $Value ? 1 : 0;
               } else {
                  // Unknown format.
                  $Value = self::NULL;
               }

               $ExRow[] = $Value;
            }
            // Write the data.
            fwrite($fp, implode(self::DELIM, $ExRow));
            // End the record.
            fwrite($fp, self::NEWLINE);
         }
      }
      if($Data !== FALSE)
         mysql_free_result($Data);
      unset($Data);

      if (!isset($Options['NoEndline'])) {
         // Write an empty line to signify the end of the table.
         fwrite($fp, self::NEWLINE);
      }
      
      mysql_close();

      return $RowCount;
   }
   
   protected function _CreateExportTable($TableName, $Query, $Mappings = array()) {
      if (!$this->ScriptCreateTable)
         return;
      
      // Limit the query to grab any additional columns.
      $QueryStruct = rtrim($Query, ';').' limit 1';
      $Structure = $this->_Structures[$TableName];
      
      $Data = $this->Query($QueryStruct, TRUE);
//      $Mb = function_exists('mb_detect_encoding');

      // Loop through the data and write it to the file.
      if ($Data === FALSE)
         return;
      
      // Get the export structure.
      while (($Row = mysql_fetch_assoc($Data)) !== FALSE) {
         $Row = (array)$Row;

         // Get the export structure.
         $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings);

         $Mappings = array_flip($Mappings);
         break;
      }
      mysql_close($Data);
      
      // Build the create table statement.
      $ColumnDefs = array();
      foreach ($ExportStructure as $ColumnName => $Type) {
         $ColumnDefs[] = "`$ColumnName` $Type";
      }
      $DestDb = '';
      if (isset($this->DestDb))
         $DestDb = $this->DestDb.'.';
      
      $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
      $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  ".implode(",\n  ", $ColumnDefs)."\n) engine=innodb";
      
      $this->Query($CreateSql);
   }

   protected function _ExportTableDB($TableName, $Query, $Mappings = array()) {
      if ($this->HasFilter($Mappings) || strpos($Query, 'union all') !== FALSE) {
         $this->_ExportTableImport($TableName, $Query, $Mappings);
         return;
      }
      
      // Check for a chunked query.
      if (strpos($Query, '{from}') !== FALSE) {
         $this->_ExportTableDBChunked($TableName, $Query, $Mappings);
         return;
      }
      
      $DestDb = '';
      if (isset($this->DestDb))
         $DestDb = $this->DestDb.'.';

      // Limit the query to grab any additional columns.
      $QueryStruct = $this->GetQueryStructure($Query, $TableName);
      $Structure = $this->_Structures[$TableName];
      
      $ExportStructure = $this->GetExportStructure($QueryStruct, $Structure, $Mappings);

      $Mappings = array_flip($Mappings);

      // Build the create table statement.
      $ColumnDefs = array();
      foreach ($ExportStructure as $ColumnName => $Type) {
         $ColumnDefs[] = "`$ColumnName` $Type";
      }
      if ($this->ScriptCreateTable) {
         $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
         $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  ".implode(",\n  ", $ColumnDefs)."\n) engine=innodb";
         $this->Query($CreateSql);
      }

      $Query = rtrim($Query, ';');
      // Build the insert statement.
      if ($this->TestMode && $this->TestLimit) {
         $Query .= " limit {$this->TestLimit}";
      }
      
//      echo $Query."\n\n\n";
//      die();
//      print_r(ParseSelect($Query));

      $InsertColumns = array();
      $SelectColumns = array();
      foreach ($ExportStructure as $ColumnName => $Type) {         
         $InsertColumns[] = '`'.$ColumnName.'`';
         if (isset($Mappings[$ColumnName])) {
            $SelectColumns[$ColumnName] = $Mappings[$ColumnName];
         } else {
            $SelectColumns[$ColumnName] = $ColumnName;
         }
      }
//      print_r($SelectColumns);
      
      $Query = ReplaceSelect($Query, $SelectColumns);

      $InsertSql = "replace {$DestDb}{$this->DestPrefix}$TableName"
         ." (\n  ".implode(",\n   ", $InsertColumns)."\n)\n"
         .$Query;
      
//      die($InsertSql);
      $this->Query($InsertSql);
   }
   
   protected function _ExportTableDBChunked($TableName, $Query, $Mappings = array()) {
      // Grab the table name from the first from.
      if (preg_match('`\sfrom\s([^\s]+)`', $Query, $Matches)) {
         $From = $Matches[1];
      } else {
         trigger_error("Could not figure out table for $TableName chunking.", E_USER_WARNING);
         return;
      }
      
      $Sql = "show table status like '{$From}';";
      $R = $this->Query($Sql, TRUE);
      $Row = mysql_fetch_assoc($R);
      mysql_free_result($R);
      $Max = $Row['Auto_increment'];
      
      if (!$Max)
         $Max = 2000000;
      
      for ($i = 0; $i < $Max; $i += $this->ChunkSize) {
         $From = $i;
         $To = $From + $this->ChunkSize - 1;
         
         $Sql = str_replace(array('{from}', '{to}'), array($From, $To), $Query);
         $this->_ExportTableDB($TableName, $Sql, $Mappings);
      }
   }
   
   public function FixPermissionColumns($Columns) {
      $Result = array();
      foreach ($Columns as $Index => $Value) {
         if (is_string($Value) && strpos($Value, '.') !== FALSE)
            $Value = array('Column' => $Value, 'Type' => 'tinyint(1)');
         $Result[$Index] = $Value;
      }
      return $Result;
   }
   
   public function ForceDate($Value) {
      if (!$Value || preg_match('`0000-00-00`', $Value)) {
         return gmdate('Y-m-d H:i:s');
      }
      return $Value;
   }

   static function FormatElapsed($Start, $End = NULL) {
      if($End === NULL)
         $Elapsed = $Start;
      else
         $Elapsed = $End - $Start;

      $m = floor($Elapsed / 60);
      $s = $Elapsed - $m * 60;
      $Result = sprintf('%02d:%05.2f', $m, $s);

      return $Result;
   }

   static function FormatValue($Value) {
      static $EscapeSearch = NULL; if ($EscapeSearch === NULL) $EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
      static $EscapeReplace = NULL; if ($EscapeReplace === NULL) $EscapeReplace = array(self::ESCAPE.self::ESCAPE, self::ESCAPE.self::DELIM, self::ESCAPE.self::NEWLINE, self::ESCAPE.self::QUOTE);

      // Format the value for writing.
      if (is_null($Value)) {
         $Value = self::NULL;
      } elseif (is_numeric($Value)) {
         // Do nothing, formats as is.
      } elseif (is_string($Value)) {
         if($Mb && mb_detect_encoding($Value) != 'UTF-8')
            $Value = utf8_encode($Value);

         $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
         $Value = self::QUOTE
            .str_replace($EscapeSearch, $EscapeReplace, $Value)
            .self::QUOTE;
      } elseif (is_bool($Value)) {
         $Value = $Value ? 1 : 0;
      } else {
         // Unknown format.
         $Value = self::NULL;
      }
      return $Value;
   }
   
   public function GenerateThumbnail($Path, $ThumbPath, $Height = 50, $Width = 50) {
      list($WidthSource, $HeightSource, $Type) = getimagesize($Path);
      
      $XCoord = 0;
      $YCoord = 0;
      $HeightDiff = $HeightSource - $Height;
      $WidthDiff = $WidthSource - $Width;
      if ($WidthDiff > $HeightDiff) {
         // Crop the original width down
         $NewWidthSource = round(($Width * $HeightSource) / $Height);

         // And set the original x position to the cropped start point.
         $XCoord = round(($WidthSource - $NewWidthSource) / 2);
         $WidthSource = $NewWidthSource;
      } else {
         // Crop the original height down
         $NewHeightSource = round(($Height * $WidthSource) / $Width);

         // And set the original y position to the cropped start point.
         $YCoord = round(($HeightSource - $NewHeightSource) / 2);
         $HeightSource = $NewHeightSource;
      }
      
      switch ($Type) {
            case 1:
               $SourceImage = imagecreatefromgif($Path);
            break;
         case 2:
               $SourceImage = imagecreatefromjpeg($Path);
            break;
         case 3:
            $SourceImage = imagecreatefrompng($Path);
            imagealphablending($SourceImage, TRUE);
            break;
      }
      
      $TargetImage = imagecreatetruecolor($Width, $Height);
      imagecopyresampled($TargetImage, $SourceImage, 0, 0, $XCoord, $YCoord, $Width, $Height, $WidthSource, $HeightSource);
      imagedestroy($SourceImage);
      
      switch ($Type) {
         case 1:
            imagegif($TargetImage, $ThumbPath);
            break;
         case 2:
            imagejpeg($TargetImage, $ThumbPath);
            break;
         case 3:
            imagepng($TargetImage, $ThumbPath);
            break;
      }
      imagedestroy($TargetImage);
//      die('</pre>foo');
   }

   public function GetCharacterSet($Table) {
      // First get the collation for the database.
      $Data = $this->Query("show table status like ':_{$Table}';");
      if (!$Data)
         return FALSE;
      if ($StatusRow = mysql_fetch_assoc($Data))
         $Collation = $StatusRow['Collation'];
      else
         return FALSE;

      // Grab the character set from the database.
      $Data = $this->Query("show collation like '$Collation'");
      if (!$Data)
         return $False;
      if ($CollationRow = mysql_fetch_assoc($Data)) {
         $CharacterSet = $CollationRow['Charset'];
         return $CharacterSet;
      }
      return FALSE;
   }

   public function GetDatabasePrefixes() {
      // Grab all of the tables.
      $Data = $this->Query('show tables');
      if ($Data === FALSE)
         return array();

      // Get the names in an array for easier parsing.
      $Tables = array();
      while (($Row = mysql_fetch_array($Data, MYSQL_NUM)) !== FALSE) {
         $Tables[] = $Row[0];
      }
      sort($Tables);

      $Prefixes = array();

      // Loop through each table and get it's prefixes.
      foreach ($Tables as $Table) {
         $PxFound = FALSE;
         foreach ($Prefixes as $PxIndex => $Px) {
            $NewPx = $this->_GetPrefix($Table, $Px);
            if (strlen($NewPx) > 0) {
               $PxFound = TRUE;
               if ($NewPx != $Px) {
                  $Prefixes[$PxIndex] = $NewPx;
               }
               break;
            }
         }
         if (!$PxFound) {
            $Prefixes[] = $Table;
         }
      }
      return $Prefixes;
   }

   protected function _GetPrefix($A, $B) {
      $Length = min(strlen($A), strlen($B));
      $Prefix = '';

      for ($i = 0; $i < $Length; $i++) {
         if ($A[$i] == $B[$i])
            $Prefix .= $A[$i];
         else
            break;
      }
      return $Prefix;
   }

   public function GetExportStructure($Row, $Structure, &$Mappings) {
      $ExportStructure = array();
      // See what columns from the structure are in

      // See what columns to add to the end of the structure.
      foreach($Row as $Column => $X) {
         if(array_key_exists($Column, $Mappings)) {
            $Mapping = $Mappings[$Column];
            if(is_string($Mapping)) {
               if(array_key_exists($Mapping, $Structure)) {
                  // This an existing column.
                  $DestColumn = $Mapping;
                  $DestType = $Structure[$DestColumn];
               } else {
                  // This is a created column.
                  $DestColumn = $Column;
                  $DestType = $Mapping;
               }
            } elseif(is_array($Mapping)) {
               $DestColumn = $Mapping['Column'];
               if (isset($Mapping['Type']))
                  $DestType = $Mapping['Type'];
               elseif(isset($Structure[$DestColumn]))
                  $DestType = $Structure[$DestColumn];
               else
                  $DestType = 'varchar(255)';
               $Mappings[$Column] = $DestColumn;
            }
         } elseif(array_key_exists($Column, $Structure)) {
            $DestColumn = $Column;
            $DestType = $Structure[$Column];
         } else {
            $DestColumn = '';
            $DestType = '';
         }

         // Check to see if we have to add the column to the export structure.
         if($DestColumn && !array_key_exists($DestColumn, $ExportStructure)) {
            // TODO: Make sure $DestType is a valid MySQL type.
            $ExportStructure[$DestColumn] = $DestType;
         }
      }

      // Add filtered mappings since filters can add new columns.
      foreach ($Mappings as $Source => $Options) {
         if (!is_array($Options) || !isset($Options['Column']))
            continue;
         $DestColumn = $Options['Column'];
         if (isset($ExportStructure[$DestColumn]))
            continue;

         if (isset($Structure[$DestColumn]))
            $DestType = $Structure[$DestColumn];
         elseif (isset($Options['Type']))
            $DestType = $Options['Type'];
         else
            continue;

         $ExportStructure[$DestColumn] = $DestType;
         $Mappings[$Source] = $DestColumn;
      }

      return $ExportStructure;
   }
   
   public function GetQueryStructure($Query, $Key = FALSE) {
      $QueryStruct = rtrim($Query, ';').' limit 1';
      if (!$Key)
         $Key = md5($QueryStruct);
      if (isset($this->_QueryStructures[$Key]))
         return $this->_QueryStructures[$Key];
      
      $R = $this->Query($QueryStruct, TRUE);
      $i = 0;
      $Result = array();
      while ($i < mysql_num_fields($R)) {
         $Meta = mysql_fetch_field($R, $i);
         $Result[$Meta->name] = $Meta->table;
         $i++;
      }
      $this->_QueryStructures[$Key] = $Result;
      return $Result;
   }

   protected function _GetTableHeader($Structure, $GlobalStructure) {
      $TableHeader = '';

      foreach($Structure as $Column => $Type) {
         if(strlen($TableHeader) > 0)
            $TableHeader .= self::DELIM;
         if(array_key_exists($Column, $GlobalStructure)) {
            $TableHeader .= $Column;
         } else {
            $TableHeader .= $Column.':'.$Type;
         }
      }
      return $TableHeader;
   }
   
   public function HasFilter(&$Mappings) {
      foreach ($Mappings as $Column => $Info) {
         if (is_array($Info) && isset($Info['Filter'])) {
            return TRUE;
         }
      }
      return FALSE;
   }
   
   /**
    * Decode the HTML out of a value.
    */
   public function HTMLDecoder($Value) {
      return html_entity_decode($Value, ENT_QUOTES, 'UTF-8');
   }
   
   public function HTMLDecoderDb($TableName, $ColumnName, $PK) {
      $Common = array('&amp;' => '&', '&lt;' => '<', '&gt;' => '>', '&apos;' => "'", '&quot;' => '"', '&#39;' => "'");
      foreach ($Common as $From => $To) {
         $FromQ = mysql_escape_string($From);
         $ToQ = mysql_escape_string($To);
         $Sql = "update :_{$TableName} set $ColumnName = replace($ColumnName, '$FromQ', '$ToQ') where $ColumnName like '%$FromQ%'";
         
         $this->Query($Sql);
      }
      
      // Now decode the remaining rows.
      $Sql = "select * from :_$TableName where $ColumnName like '%&%;%'";
      $Result = $this->Query($Sql, TRUE);
      while ($Row = mysql_fetch_assoc($Result)) {
         $From = $Row[$ColumnName];
         $To = $this->HTMLDecoder($From);
         
         if ($From != $To) {
            $ToQ = mysql_escape_string($To);
            $Sql = "update :_{$TableName} set $ColumnName = '$ToQ' where $PK = {$Row[$PK]}";
            $this->Query($Sql, TRUE);
         }
      }
      
   }

    /**
    * vBulletin needs some fields decoded and it won't hurt the others.
    */
//   public function HTMLDecoder($Table, $Field, $Value) {
//      if(($Table == 'Category' || $Table == 'Discussion') && $Field == 'Name')
//         return html_entity_decode($Value);
//      else
//         return $Value;
//   }


   protected function _OpenFile() {
//      if($this->UseStreaming) {
//         /** Setup the output to stream the file. */
//
//         // required for IE, otherwise Content-Disposition may be ignored
//         if(ini_get('zlib.output_compression'))
//            ini_set('zlib.output_compression', 'Off');
//
//         @ob_end_clean();
//
//         
//         $fp = fopen('php://output', 'ab');
//         header("Content-Disposition: attachment; filename=\"{$this->Path}\"");
//         header('Content-Type: text/plain');
//         header("Content-Transfer-Encoding: binary");
//         header('Accept-Ranges: bytes');
//         header("Cache-control: private");
//         header('Pragma: private');
//         header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
//      } else {
         $this->Path = str_replace(' ', '_', $this->Path);
         if($this->UseCompression())
            $fp = gzopen($this->Path, 'wb');
         else
            $fp = fopen($this->Path, 'wb');
//      }
      $this->_File = $fp;
      return $fp;
   }

   /** Execute a SQL query on the current connection.
    *
    * @param string $Query The sql to execute.
    * @return resource The query cursor.
    */
   public function Query($Query, $Buffer = FALSE) {
      if (isset($this->_LastResult) && is_resource($this->_LastResult))
         mysql_free_result($this->_LastResult);
      $Query = str_replace(':_', $this->Prefix, $Query); // replace prefix.
      if ($this->SourcePrefix) {
         $Query = preg_replace("`\b{$this->SourcePrefix}`", $this->Prefix, $Query); // replace prefix.
      }
      
      $Query = rtrim($Query, ';').';';
      
      if (!preg_match('`limit 1;$`', $Query))
         $this->Queries[] = $Query;
         
      if ($this->Destination == 'database' && $this->CaptureOnly) {
         if (!preg_match('`^\s*select|show|describe|create`', $Query))
            return 'SKIPPED';
      }

      $Connection = mysql_connect($this->_Host, $this->_Username, $this->_Password);
      mysql_select_db($this->_DbName);
      mysql_query("set names {$this->CharacterSet}");
      if ($Buffer)
         $Result = mysql_query($Query, $Connection);
      else {
         $Result = mysql_unbuffered_query($Query, $Connection);
         if (is_resource($Result))
            $this->_LastResult = $Result;
      }

      if ($Result === FALSE) {
         echo '<pre>', htmlspecialchars($Query), '</pre>';
         trigger_error(mysql_error($Connection));
      }
      
      return $Result;
   }
   
   public function QueryN($SqlList) {
      if (!is_array($SqlList))
         $SqlList = explode(';', $SqlList);
      
      foreach ($SqlList as $Sql) {
         $Sql = trim($Sql);
         if ($Sql)
            $this->Query($Sql);
      }
   }
   
   public function SetConnection($Host = NULL, $Username = NULL, $Password = NULL, $DbName = NULL) {
      $this->_Host = $Host;
      $this->_Username = $Username;
      $this->_Password = $Password;
      $this->_DbName = $DbName;
   }

   /**
    * Returns an array of all the expected export tables and expected columns in the exports.
    * When exporting tables using ExportTable() all of the columns in this structure will always be exported in the order here, regardless of how their order in the query.
    * @return array
    * @see vnExport::ExportTable()
    */
   public function Structures() {
      return $this->_Structures;
   }
   
   public function TimestampToDate($Value) {
      if ($Value == NULL)
         return NULL;
      else
         return gmdate('Y-m-d H:i:s', $Value);
   }
   
   public function TimestampToDateDb($Value) {
      
   }

   /**
    * Whether or not to use compression on the output file.
    * @param bool $Value The value to set or NULL to just return the value.
    * @return bool
    */
   public function UseCompression($Value = NULL) {
      if($Value !== NULL)
         $this->_UseCompression = $Value;

      return $this->_UseCompression && $this->Destination == 'file' && !$this->UseStreaming && function_exists('gzopen');
   }

   /**
    * Returns the version of export file that will be created with this export.
    * The version is used when importing to determine the format of this file.
    * @return string
    */
   public function Version() {
      return APPLICATION_VERSION;
   }

   /**
    * Checks whether or not a table and columns exist in the database.
    *
    * @param string $Table The name of the table to check.
    * @param array $Columns An array of column names to check.
    * @return bool|array The method will return one of the following
    *  - true: If table and all of the columns exist.
    *  - false: If the table does not exist.
    *  - array: The names of the missing columns if one or more columns don't exist.
    */
   public function Exists($Table, $Columns = array()) {
      static $_Exists = array();
      
      if (!isset($_Exists[$Table])) {
         $Result = $this->Query("show table status like ':_$Table'", TRUE);
         if (!$Result) {
            $_Exists[$Table] = FALSE;
         } elseif (!mysql_fetch_assoc($Result)) {
            $_Exists[$Table] = FALSE;
         } else {
            mysql_free_result($Result);
            $Desc = $this->Query('describe :_'.$Table);
            if ($Desc === false) {
               $_Exists[$Table] = FALSE;
            } else {
               if (is_string($Desc))
                  die($Desc);
               
               $Cols = array();
               while (($TD = mysql_fetch_assoc($Desc)) !== false) {
                  $Cols[$TD['Field']] = $TD;
               }
               mysql_free_result($Desc);
               $_Exists[$Table] = $Cols;
            }
         }
      }
      
      if ($_Exists[$Table] == FALSE)
         return FALSE;
      
      $Columns = (array)$Columns;
      
      if (count($Columns) == 0)
         return true;
      
      $Missing = array();
      $Cols = array_keys($_Exists[$Table]);
      foreach ($Columns as $Column) {
         if (!in_array($Column, $Cols))
            $Missing[] = $Column;
      }
      return count($Missing) == 0 ? true : $Missing;
   }

   /**
    * Checks all required source tables are present
    */
   public function VerifySource($RequiredTables) {
      $MissingTables = false;
      $CountMissingTables = 0;
      $MissingColumns = array();

      foreach($RequiredTables as $ReqTable => $ReqColumns) {
         $TableDescriptions = $this->Query('describe :_'.$ReqTable);
         //echo 'describe '.$Prefix.$ReqTable;
         if($TableDescriptions === false) { // Table doesn't exist
            $CountMissingTables++;
            if($MissingTables !== false)
               $MissingTables .= ', '.$ReqTable;
            else
               $MissingTables = $ReqTable;
         }
         else {
            // Build array of columns in this table
            $PresentColumns = array();
            while (($TD = mysql_fetch_assoc($TableDescriptions)) !== false) {
               $PresentColumns[] = $TD['Field'];
            }
            // Compare with required columns
            foreach($ReqColumns as $ReqCol) {
               if(!in_array($ReqCol, $PresentColumns))
                  $MissingColumns[$ReqTable][] = $ReqCol;
            }

            mysql_free_result($TableDescriptions);
         }
      }

      // Return results
      if($MissingTables === false) {
         if(count($MissingColumns) > 0) {
            $Result = array();

            // Build a string of missing columns.
            foreach ($MissingColumns as $Table => $Columns) {
               $Result[] = "The $Table table is missing the following column(s): ".implode(', ', $Columns);
            }
            return implode("<br />\n", $Result);
         }
         else return true; // Nothing missing!
      }
      elseif($CountMissingTables == count($RequiredTables)) {
         $Result = 'The required tables are not present in the database. Make sure you entered the correct database name and prefix and try again.';

         // Guess the prefixes to notify the user.
         $Prefixes = $this->GetDatabasePrefixes();
         if (count($Prefixes) == 1)
            $Result .= ' Based on the database you provided, your database prefix is probably '.implode(', ', $Prefixes);
         elseif (count($Prefixes) > 0)
            $Result .= ' Based on the database you provided, your database prefix is probably one of the following: '.implode(', ', $Prefixes);

         return $Result;
      }
      else {
         return 'Missing required database tables: '.$MissingTables;
      }
   }

   public function WriteBeginTable($fp, $TableName, $Columns) {
      $TableHeader = '';

      foreach($Columns as $Key => $Value) {
         if (is_numeric($Key)) {
            $Column = $Value;
            $Type = '';
         } else {
            $Column = $Key;
            $Type = $Value;
         }

         if(strlen($TableHeader) > 0)
            $TableHeader .= self::DELIM;

         if ($Type)
            $TableHeader .= $Column.':'.$Type;
         else
            $TableHeader .= $Column;
      }

      fwrite($fp, 'Table: '.$TableName.self::NEWLINE);
      fwrite($fp, $TableHeader.self::NEWLINE);
      
   }
   
   public static function FileExtension($ColumnName) {
      return "right($ColumnName, instr(reverse($ColumnName), '.'))";
   }
   
   public function UrlDecode($Value) {
      return urldecode($Value);
   }
}
?><?php


/* Contents included from views.php */
?><?php
/**
 * Views for Vanilla 2 export tools
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
 
   
/**
 * HTML header
 */
function PageHeader() {
   echo '<?xml version="1.0" encoding="UTF-8"?>';
      ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
   <title>Vanilla Porter - Forum Export Tool</title>
   <!-- Contents included from style.css -->
<style>
body {
	font-family: 'lucida grande','Lucida Sans Unicode', tahoma, sans-serif;
   background: url('http://vanillaforums.com/porter/slicesplash.jpg') top center no-repeat #C7E6FB;
   margin: 0px;
   padding: 0px;
   text-align: center;
}
a,
a:link,
a:active,
a:visited {
   color: #2786C2;
   text-decoration: none;
   }
a:hover {
   color: #FF0084 !important;
   text-decoration: underline;
   }
div.Title {
   background:#E2F4FF none repeat scroll 0 0;
   border-top: 1px solid #A5D0E7;
   border-bottom: 1px solid #A5D0E7;
	margin: 50px 0;
	padding: 30px 0 4px;
}
div.Title h1 {
	text-align: left;
	width: 600px;
	margin: 0 auto;
}
div.Title img {
	top: 20px;
	position: absolute;
}
div.Title p {
	padding: 0 0 0 270px;
	margin: 0;
	font-size: 30px;
}

h1 {
   font-family: Arial, Helvetica, Verdana;
   color: #02455B;
   width: 568px;
   margin: 0 auto;
   padding: 0;
   font-size: 180%;
}
div.Form {
   text-align: center;
}
div.Form ul {
   width: 500px;
   margin: 0 auto;
	padding: 0;
}

div.Errors {
   background: #d00;
   padding: 20px 8px !important;
   margin: 0 0 10px;
   border-bottom: 1px solid #C0E7F5;
}
.Errors li {
   padding: 4px 0 !important;
   border: 0px !important;
   margin: 0px !important;
   color: #fff !important;
   font-size: 16px;
   line-height: 150%;
}
.Errors li pre,
.Errors li code {
   border-radius: 3px;
	-moz-border-radius: 3px;
	-webkit-border-radius: 3px;
	border: 1px solid #b00;
	background: #c00;
	margin: 10px 0 0;
	padding: 4px 8px;
	display: block;
	font-size: 13px;
	font-weight: normal;
	font-family: monospace;
}
.Errors li a {
   color: #ffff00;
	text-decoration: underline;
}
.Errors li a:hover {
   color: #ff0 !important;
	text-decoration: none;
}
.Hidden {
   display: none;
}
/* Forms */
form {
   margin: 0 0 20px;
   text-align: right;
}
form ul {
   text-align: left;
   list-style: none;
   margin: 0px;
   padding: 10px;
}
form ul li {
   padding: 10px 0;
   font-size: 18px;
}
form ul li.Warning {
   padding-bottom: 0;
   border-bottom: 0;
   font-size: 17px;
}
form ul li.Warning div {
   font-size: 14px;
	line-height: 1.6;
	color: #000;
   padding: 16px 0 8px;
}
form label {
   font-family: Arial, Helvetica, Verdana;
   font-weight: bold;
   display: block;
   padding: 8px 0 0;
   font-size: 110%;
	color: #02455B;
}
form label span {
	font-size: 13px;
	color: #555;
	font-weight: normal;
	padding: 0 0 0 10px;
}
form select {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 496px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 480px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox:focus {
   color: #000;
   background: #FFFEDE;
   border: 1px solid #aaa;
}
form li.Last {
   padding: 12px 0 2px;
   border-bottom: 0;
}
div.Button {
   text-align: right;
   padding: 12px 0 30px;
   width: 496px;
   margin: 0 auto;
}
div.Button a,
input.Button {
   cursor: pointer;
   font-family: arial, helvetica, verdana;
   font-size: 25px;
   font-weight: bold;
   color: #02475A;
	text-shadow: 0 1px 0 #fff;
   margin: 0;
   padding: 3px 10px;
   background: url('http://vanillaforums.com/porter/buttonbg.png') repeat-x center left #f8f8f8;
   border: 1px solid #999;
   border-radius: 3px;
   -moz-border-radius: 3px;
   -webkit-border-radius: 3px;
	box-shadow: 0px 0px 2px #999;
	-moz-box-shadow: 0px 0px 2px #999;
	-webkit-box-shadow: 0px 0px 2px #999;  
}
div.Button a {
   padding: 4px 8px;
}
div.Button a:hover,
input.Button:hover {
   text-decoration: none;
   color: #111;
   border: 1px solid #666;
}
div.Button a:focus,
input.Button:focus {
   background: #eee;
}
/* readme.html */
div.Info {
	text-align: left;
	width: 568px;
	margin: 0 auto 0px;
	line-height: 1.6;
}
div.Info h1 {
	padding: 6px 0 0;
	margin: 0;
}
div.Info p {
	color: #000;
	padding: 3px 0 6px;
	margin: 0;
}
div.Info li {
	color: #000;
	padding: 1px 0;
	margin: 0;
}
.Version {
   font-size: 9pt;
   font-weight: normal;
}
</style>
</head>
<body>
<div id="Frame">
	<div id="Content">
      <div class="Title">
         <h1>
            <img src="http://vanillaforums.com/porter/vanilla_logo.png" alt="Vanilla" />
            <p>Vanilla Porter <span class="Version">Version <?php echo APPLICATION_VERSION; ?></span></p>
         </h1>
      </div>
   <?php
}

   
/**
 * HTML footer
 */
function PageFooter() {
   ?>
   </div>
</div>
</body>
</html><?php

}

   
/**
 * Message: Write permission fail
 */
function ViewNoPermission($msg) {
   PageHeader(); ?>
   <div class="Messages Errors">
      <ul>
         <li><?php echo $msg; ?></li>
      </ul>
   </div>
   
   <?php PageFooter();
}

   
/**
 * Form: Database connection info
 */
function ViewForm($Data) {
   if (defined('CONSOLE')) {
      echo $msg;
      return;
   }


   $forums = GetValue('Supported', $Data, array());
   $msg = GetValue('Msg', $Data, '');
   $Info = GetValue('Info', $Data, '');
   $CanWrite = GetValue('CanWrite', $Data, NULL);
   if($CanWrite === NULL)
      $CanWrite = TestWrite();
   if (!$CanWrite) {
      $msg = 'The porter does not have write permission to write to this folder. You need to give the porter permission to create files so that it can generate the export file.'.$msg;
   }

   PageHeader(); ?>
   <div class="Info">
      Welcome to the Vanilla Porter, an application for exporting your forum to the Vanilla 2 import format.
      For help using this application, 
      <a href="http://vanillaforums.com/blog/help-topics/importing-data" style="text-decoration:underline;">see these instructions</a>.
   </div>
<form action="<?php echo $_SERVER['PHP_SELF'].'?'.http_build_query($_GET); ?>" method="post">
      <input type="hidden" name="step" value="info" />
      <div class="Form">
         <?php if($msg!='') : ?>
         <div class="Messages Errors">
            <ul>
               <li><?php echo $msg; ?></li>
            </ul>
         </div>
         <?php endif; ?>
         <ul>
            <li>
               <label>Source Forum Type</label>
               <select name="type" id="ForumType" onchange="updatePrefix();">
               <?php foreach($forums as $forumClass => $forumInfo) : ?>
                  <option value="<?php echo $forumClass; ?>"<?php 
                     if(GetValue('type') == $forumClass) echo ' selected="selected"'; ?>><?php echo $forumInfo['name']; ?></option>
               <?php endforeach; ?>
               </select>
            </li>
            <li>
               <label>Table Prefix <span>Most installations have a database prefix. If you&rsquo;re sure you don&rsquo;t have one, leave this blank.</span></label>
               <input class="InputBox" type="text" name="prefix" value="<?php echo htmlspecialchars(GetValue('prefix')) != '' ? htmlspecialchars(GetValue('prefix')) : $forums['vanilla1']['prefix']; ?>" id="ForumPrefix" />
            </li>
            <li>
               <label>Database Host <span>Usually "localhost".</span></label>
               <input class="InputBox" type="text" name="dbhost" value="<?php echo htmlspecialchars(GetValue('dbhost', '', 'localhost')) ?>" />
            </li>
            <li>
               <label>Database Name</label>
               <input class="InputBox" type="text" name="dbname" value="<?php echo htmlspecialchars(GetValue('dbname')) ?>" />
            </li>
            <li>
               <label>Database Username</label>
               <input class="InputBox" type="text" name="dbuser" value="<?php echo htmlspecialchars(GetValue('dbuser')) ?>" />
            </li>
            <li>
               <label>Database Password</label>
               <input class="InputBox" type="password" name="dbpass" value="<?php echo GetValue('dbpass') ?>" />
            </li>
         </ul>
         <div class="Button">
            <input class="Button" type="submit" value="Begin Export" />
         </div>
      </div>
   </form>
   <script type="text/javascript">
   //<![CDATA[
      function updatePrefix() {
         var type = document.getElementById('ForumType').value;
         switch(type) {
            <?php foreach($forums as $ForumClass => $ForumInfo) : ?>
            case '<?php echo $ForumClass; ?>': document.getElementById('ForumPrefix').value = '<?php echo $ForumInfo['prefix']; ?>'; break;
            <?php endforeach; ?>
         }
      }
   //]]>
   </script> 

   <?php PageFooter();
}


/**
 * Message: Result of export
 */
function ViewExportResult($Msgs = '', $Class = 'Info', $Path = '') {
   PageHeader();
   if($Msgs) {
      // TODO: Style this a bit better.
      echo "<div class=\"$Class\">";
      foreach($Msgs as $Msg) {
         echo "<p>$Msg</p>\n";
      }
      echo "</div>";
      if($Path)
         echo "<a href=\"$Path\"><b>Download $Path</b></a>";
   }
   PageFooter();
}

function GetValue($Key, $Collection = NULL, $Default = '') {
   if(!$Collection)
      $Collection = $_POST;
   if(array_key_exists($Key, $Collection))
      return $Collection[$Key];
   return $Default;
}
?><?php


/* Contents included from class.exportcontroller.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/** Generic controller implemented by forum-specific ones */
abstract class ExportController {

   /** @var array Database connection info */
   protected $DbInfo = array();

   /** @var array Required tables, columns set per exporter */
   protected $SourceTables = array();

   protected $UseStreaming = FALSE;

   /**
    * @var ExportModel
    */
   protected $Ex = NULL;

   /** Forum-specific export routine */
   abstract protected function ForumExport($Ex);

   /**
    * Construct and set the controller's properties from the posted form.
    */
   public function __construct() {
      $this->HandleInfoForm();
   }

   /**
    * Logic for export process
    */
   public function DoExport() {
      global $Supported;

      // Test connection
      $Msg = $this->TestDatabase();
      if($Msg === true) {
         // Create db object
         $Ex = new ExportModel;
         $Ex->Controller = $this;
         $this->Ex = $Ex;
         $Ex->SetConnection($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'], $this->DbInfo['dbname']);
         $Ex->Prefix = $this->DbInfo['prefix'];
         $Ex->Destination = $this->Param('dest', 'file');
         $Ex->DestDb = $this->Param('destdb', NULL);
         $Ex->TestMode = $this->Param('test', FALSE);

         $Ex->UseStreaming = FALSE; //$this->UseStreaming;
         // Test src tables' existence structure
         $Msg = $Ex->VerifySource($this->SourceTables);
         if($Msg === true) {
            // Good src tables - Start dump
            $Ex->UseCompression(TRUE);
            $Ex->FilenamePrefix = $this->DbInfo['dbname'];
            set_time_limit(60*60);
            
//            ob_start();
            $this->ForumExport($Ex);
//            $Errors = ob_get_clean();
            
            $Msg = $Ex->Comments;

            // Write the results.
            if($Ex->UseStreaming)
               exit;
            else
               ViewExportResult($Msg, 'Info', $Ex->Path);
         }
         else
            ViewForm(array('Supported' => $Supported, 'Msg' => $Msg, 'Info' => $this->DbInfo)); // Back to form with error
      }
      else
         ViewForm(array('Supported' => $Supported, 'Msg' => $Msg, 'Info' => $this->DbInfo)); // Back to form with error
   }

   /**
    * User submitted db connection info
    */
   public function HandleInfoForm() {
      $this->DbInfo = array(
         'dbhost' => $_POST['dbhost'],
         'dbuser' => $_POST['dbuser'],
         'dbpass' => $_POST['dbpass'],
         'dbname' => $_POST['dbname'],
         'type'   => $_POST['type'],
         'prefix' => preg_replace('/[^A-Za-z0-9_-]/','',$_POST['prefix']));
      $this->UseStreaming = array_key_exists('savefile', $_POST) ? FALSE : TRUE;
   }

   public function Param($Name, $Default = FALSE) {
      if (isset($_POST[$Name]))
         return $_POST[$Name];
      elseif (isset($_GET[$Name]))
         return $_GET[$Name];
      else
         return $Default;
   }

   /**
    * Test database connection info
    */
   public function TestDatabase() {
      // Connection
      if($C = mysql_connect($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'])) {
         // Database
         if(mysql_select_db($this->DbInfo['dbname'], $C)) {
            mysql_close($C);
            $Result = true;
         }
         else {
            mysql_close($C);
            $Result = 'Could not find database &ldquo;'.$this->DbInfo['dbname'].'&rdquo;.';
         }
      }
      else
         $Result = 'Could not connect to '.$this->DbInfo['dbhost'].' as '.$this->DbInfo['dbuser'].' with given password.';

      return $Result;
   }
}
?><?php


/* Contents included from functions.php */
?><?php

function decho($Var, $Prefix = 'debug') {
   echo '<pre><b>'.$Prefix.'</b>: '.htmlspecialchars(print_r($Var, TRUE)).'</pre>';
}

function GenerateThumbnail($Path, $ThumbPath, $Height = 50, $Width = 50) {
   list($WidthSource, $HeightSource, $Type) = getimagesize($Path);
   
   if (!$WidthSource)
      return FALSE;
   
   if (!file_exists(dirname($ThumbPath)))
      mkdir(dirname($ThumbPath), 0777, TRUE);
   
   if ($WidthSource <= $Width && $HeightSource <= $Width) {
      copy($Path, $ThumbPath);
      return TRUE;
   }

   $XCoord = 0;
   $YCoord = 0;
   $HeightDiff = $HeightSource - $Height;
   $WidthDiff = $WidthSource - $Width;
   if ($WidthDiff > $HeightDiff) {
      // Crop the original width down
      $NewWidthSource = round(($Width * $HeightSource) / $Height);

      // And set the original x position to the cropped start point.
      $XCoord = round(($WidthSource - $NewWidthSource) / 2);
      $WidthSource = $NewWidthSource;
   } else {
      // Crop the original height down
      $NewHeightSource = round(($Height * $WidthSource) / $Width);

      // And set the original y position to the cropped start point.
      $YCoord = round(($HeightSource - $NewHeightSource) / 2);
      $HeightSource = $NewHeightSource;
   }

   switch ($Type) {
         case 1:
            $SourceImage = imagecreatefromgif($Path);
         break;
      case 2:
            $SourceImage = imagecreatefromjpeg($Path);
         break;
      case 3:
         $SourceImage = imagecreatefrompng($Path);
         imagealphablending($SourceImage, TRUE);
         break;
   }

   $TargetImage = imagecreatetruecolor($Width, $Height);
   imagecopyresampled($TargetImage, $SourceImage, 0, 0, $XCoord, $YCoord, $Width, $Height, $WidthSource, $HeightSource);
   imagedestroy($SourceImage);

   switch ($Type) {
      case 1:
         imagegif($TargetImage, $ThumbPath);
         break;
      case 2:
         imagejpeg($TargetImage, $ThumbPath);
         break;
      case 3:
         imagepng($TargetImage, $ThumbPath);
         break;
   }
   imagedestroy($TargetImage);
   return TRUE;
}

function ParseSelect($Sql) {
   if (!preg_match('`^\s*select\s+(.+)\s+from\s+(.+)\s*`is', $Sql, $Matches)) {
      trigger_error("Could not parse '$Sql'", E_USER_ERROR);
   }
   $Result = array('Select' => array(), 'From' => '');
   $Select = $Matches[1];
   $From = $Matches[2];
   
   // Replace commas within function calls.
   $Select = preg_replace_callback('`\(([^)]+?)\)`', '_ReplaceCommas', $Select);
//   echo($Select);
   $Parts = explode(',', $Select);
   
   $Selects = array();
   foreach ($Parts as $Expr) {
      $Expr = trim($Expr);
      $Expr = str_replace('!COMMA!', ',', $Expr);
      
      // Check for the star match.
      if (preg_match('`(\w+)\.\*`', $Expr, $Matches)) {
         $Result['Star'] = $Matches[1];
      }
      
      // Check for an alias.
      if (preg_match('`^(.*)\sas\s(.*)$`is', $Expr, $Matches)) {
//         decho($Matches, 'as');
         $Alias = trim($Matches[2], '`');
         $Selects[$Alias] = $Matches[1];
      } elseif (preg_match('`^[a-z_]?[a-z0-9_]*$`i', $Expr)) {
          // We are just selecting one column.
         $Selects[$Expr] = $Expr;
      } elseif (preg_match('`^[a-z_]?[a-z0-9_]*\.([a-z_]?[a-z0-9_]*)$`i', $Expr, $Matches)) {
         // We are looking at an alias'd select.
         $Alias = $Matches[1];
         $Selects[$Alias] = $Expr;
      } else {
         $Selects[] = $Expr;
      }
   }
   
   $Result['Select'] = $Selects;
   $Result['From'] = $From;
   $Result['Source'] = $Sql;
   return $Result;
}

function _ReplaceCommas($Matches) {
   return str_replace(',', '!COMMA!', $Matches[0]);
}

/**
 *
 * @param type $Sql
 * @param array $Columns An array in the form Alias => Column or just Column
 * @return type 
 */
function ReplaceSelect($Sql, $Columns) {
   if (is_string($Sql)) {
      $Parsed = ParseSelect($Sql);
   } else {
      $Parsed = $Sql;
   }
   
   // Set a prefix for new selects.
   if (isset($Parsed['Star']))
      $Px = $Parsed['Star'].'.';
   else
      $Px = '';
   
   $Select = $Parsed['Select'];
   
   $NewSelect = array();
   foreach ($Columns as $Index => $Value) {
      if (is_numeric($Index))
         $Alias = $Value;
      else
         $Alias = $Index;
      
      if (isset($Select[$Value])) {
         $NewSelect[$Alias] = $Select[$Value];
      } else {
         $NewSelect[$Alias] = $Px.$Value;
      }
   }
   $Parsed['Select'] = $NewSelect;
   
   if (is_string($Sql)) {
      return SelectString($Parsed);
   } else {
      return $Parsed;
   }
}

function SelectString($Parsed) {
   // Build the select.
   $Parts = $Parsed['Select'];
   $Selects = array();
   foreach ($Parts as $Alias => $Expr) {
      if (is_numeric($Alias) || $Alias == $Expr)
         $Selects[] = $Expr;
      else
         $Selects[] = "$Expr as `$Alias`";
   }
   $Select = implode(",\n  ", $Selects);
   
   $From = $Parsed['From'];
   
   $Result = "select\n  $Select\nfrom $From";
   return $Result;
}
?><?php



/* Contents included from class.vanilla1.php */
?><?php
/**
 * Vanilla 1 exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class Vanilla1 extends ExportController {

   /** @var array Required tables => columns */  
   public $SourceTables = array(
      'User'=> array('UserID', 'Name', 'Password', 'Email', 'CountComments'),
      'Role'=> array('RoleID', 'Name', 'Description'),
      'Category'=> array('CategoryID', 'Name', 'Description'),
      'Discussion'=> array('DiscussionID', 'Name', 'CategoryID', 'DateCreated', 'AuthUserID', 'DateLastActive', 'Closed', 'Sticky', 'CountComments', 'Sink', 'LastUserID'),
      'Comment'=> array('CommentID', 'DiscussionID', 'AuthUserID', 'DateCreated', 'EditUserID', 'DateEdited', 'Body', 'Deleted')
      );
   
   /**
    * Forum-specific export format
    * @todo Project file size / export time and possibly break into multiple files
    * @param ExportModel $Ex
    * 
    */
   protected function ForumExport($Ex) {
      $this->Ex = $Ex;

      // Get the characterset for the comments.
      $CharacterSet = $Ex->GetCharacterSet('Comment');
      if ($CharacterSet)
         $Ex->CharacterSet = $CharacterSet;

      // Begin
      $Ex->BeginExport('', 'Vanilla 1.*');
      
      // Users
      $User_Map = array(
         'UserID'=>'UserID',
         'Name'=>'Name',
         'Password'=>'Password',
         'Email'=>'Email',
         'Icon'=>'Photo',
         'CountComments'=>'CountComments',
         'Discovery'=>'DiscoveryText'
      );   
      $Ex->ExportTable('User', "SELECT * FROM :_User", $User_Map);  // ":_" will be replaced by database prefix
      
      // Roles
      
      // Since the zero role is a valid role in Vanilla 1 then we'll have to reassign it.
      $R = $Ex->Query('select max(RoleID) as RoleID from :_Role');
      $ZeroRoleID = 0;
      if (is_resource($R)) {
         while (($Row = @mysql_fetch_assoc($R)) !== false) {
            $ZeroRoleID = $Row['RoleID'];
         }
      }
      $ZeroRoleID++;

      /*
		    'RoleID' => 'int', 
		    'Name' => 'varchar(100)', 
		    'Description' => 'varchar(200)'
		 */
      $Role_Map = array(
         'RoleID'=>'RoleID',
         'Name'=>'Name',
         'Description'=>'Description'
      );   
      $Ex->ExportTable('Role', "select RoleID, Name, Description from :_Role union all select $ZeroRoleID, 'Applicant', 'Created by the Vanilla Porter'", $Role_Map);

      $Permission_Map = array(
         'RoleID' => 'RoleID',
         'PERMISSION_SIGN_IN' => 'Garden.SignIn.Allow',
         'Permissions' => array('Column' => 'Vanilla.Comments.Add', 'Type' => 'tinyint', 'Filter' => array($this, 'FilterPermissions')),
         'PERMISSION_START_DISCUSSION' => array('Column' => 'Vanilla.Discussions.Add', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_SINK_DISCUSSION' => array('Column' => 'Vanilla.Discussions.Sink', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_STICK_DISCUSSIONS' => array('Column' => 'Vanilla.Discussions.Announce', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_CLOSE_DISCUSSIONS' => array('Column' => 'Vanilla.Discussions.Close', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_EDIT_DISCUSSIONS' => array('Column' => 'Vanilla.Discussions.Edit', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_EDIT_COMMENTS' => array('Column' => 'Vanilla.Comments.Edit', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_ADD_CATEGORIES' => array('Column' => 'Vanilla.Categories.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_APPROVE_APPLICANTS' => array('Column' => 'Garden.Applicants.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_EDIT_USERS' => array('Column' => 'Garden.Users.Edit', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_MANAGE_REGISTRATION' => array('Column' => 'Garden.Registration.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_CHANGE_APPLICATION_SETTINGS' => array('Column' => 'Garden.Settings.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_MANAGE_EXTENSIONS' => array('Column' => 'Garden.Plugins.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
         'PERMISSION_MANAGE_THEMES' => array('Column' => 'Garden.Themes.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool'))
      );
      $Ex->ExportTable('Permission', "select * from :_Role", $Permission_Map);

      // UserRoles
      /*
		    'UserID' => 'int', 
		    'RoleID' => 'int'
		 */
      $UserRole_Map = array(
         'UserID' => 'UserID', 
         'RoleID'=> 'RoleID'
      );
      $Ex->ExportTable('UserRole', "select UserID, case RoleID when 0 then $ZeroRoleID else RoleID end as RoleID from :_User", $UserRole_Map);
      
      // Categories
      /*
          'CategoryID' => 'int', 
          'Name' => 'varchar(30)', 
          'Description' => 'varchar(250)', 
          'ParentCategoryID' => 'int', 
          'DateInserted' => 'datetime', 
          'InsertUserID' => 'int', 
          'DateUpdated' => 'datetime', 
          'UpdateUserID' => 'int'
		 */
      $Category_Map = array(
         'CategoryID' => 'CategoryID', 
         'Name' => 'Name',
         'Description'=> 'Description'
      );
      $Ex->ExportTable('Category', "select CategoryID, Name, Description from :_Category", $Category_Map);
      
      // Discussions
      /*
		    'DiscussionID' => 'int', 
		    'Name' => 'varchar(100)', 
		    'CategoryID' => 'int', 
		    'Body' => 'text', 
		    'Format' => 'varchar(20)', 
		    'DateInserted' => 'datetime', 
		    'InsertUserID' => 'int', 
		    'DateUpdated' => 'datetime', 
		    'UpdateUserID' => 'int', 
		    'Score' => 'float', 
		    'Announce' => 'tinyint', 
		    'Closed' => 'tinyint'
		 */
      $Discussion_Map = array(
         'DiscussionID' => 'DiscussionID', 
         'Name' => 'Name',
         'CategoryID'=> 'CategoryID',
         'DateCreated'=>'DateInserted',
         'DateCreated2'=>'DateUpdated',
         'AuthUserID'=>'InsertUserID',
         'DateLastActive'=>'DateLastComment',
         'AuthUserID2'=>'UpdateUserID',
         'Closed'=>'Closed',
         'Sticky'=>'Announce',
         'CountComments'=>'CountComments',
         'Sink'=>'Sink',
         'LastUserID'=>'LastCommentUserID'
      );
      $Ex->ExportTable('Discussion',
         "SELECT d.*,
            d.LastUserID as LastCommentUserID,
            d.DateCreated as DateCreated2, d.AuthUserID as AuthUserID2,
            c.Body,
            c.FormatType as Format
         FROM :_Discussion d
         LEFT JOIN :_Comment c
            ON d.FirstCommentID = c.CommentID
         WHERE coalesce(d.WhisperUserID, 0) = 0 and d.Active = 1", $Discussion_Map);
      
      // Comments
      /*
		    'CommentID' => 'int', 
		    'DiscussionID' => 'int', 
		    'DateInserted' => 'datetime', 
		    'InsertUserID' => 'int', 
		    'DateUpdated' => 'datetime', 
		    'UpdateUserID' => 'int', 
		    'Format' => 'varchar(20)', 
		    'Body' => 'text', 
		    'Score' => 'float'
		 */
      $Comment_Map = array(
         'CommentID' => 'CommentID',
         'DiscussionID' => 'DiscussionID',
         'AuthUserID' => 'InsertUserID',
         'DateCreated' => 'DateInserted',
         'EditUserID' => 'UpdateUserID',
         'DateEdited' => 'DateUpdated',
         'Body' => 'Body',
         'FormatType' => 'Format'
      );
      $Ex->ExportTable('Comment', "
         SELECT 
            c.*
         FROM :_Comment c
         JOIN :_Discussion d
            ON c.DiscussionID = d.DiscussionID
         WHERE d.FirstCommentID <> c.CommentID
            AND c.Deleted = '0'
            AND coalesce(d.WhisperUserID, 0) = 0
            AND coalesce(c.WhisperUserID, 0) = 0", $Comment_Map);

      $Ex->ExportTable('UserDiscussion', "
         SELECT
            w.UserID,
            w.DiscussionID,
            w.CountComments,
            w.LastViewed as DateLastViewed,
            case when b.UserID is not null then 1 else 0 end AS Bookmarked
         FROM :_UserDiscussionWatch w
         LEFT JOIN :_UserBookmark b
            ON w.DiscussionID = b.DiscussionID AND w.UserID = b.UserID");
      
      // Conversations

      // Create a mapping tables for conversations.
      // These mapping tables are used to group comments that a) are in the same discussion and b) are from and to the same users.

      $Ex->Query("drop table if exists z_pmto");

      $Ex->Query("create table z_pmto (
  CommentID int,
  UserID int,
  primary key(CommentID, UserID)
 )");

      $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  AuthUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

      $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  WhisperUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

      $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

      $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.WhisperUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

      $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  c.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

      $Ex->Query("drop table if exists z_pmto2");

      $Ex->Query("create table z_pmto2 (
  CommentID int,
  UserIDs varchar(250),
  primary key (CommentID)
)");

      $Ex->Query("insert z_pmto2 (
  CommentID,
  UserIDs
)
select
  CommentID,
  group_concat(UserID order by UserID)
from z_pmto
group by CommentID");


      $Ex->Query("drop table if exists z_pm");

      $Ex->Query("create table z_pm (
  CommentID int,
  DiscussionID int,
  UserIDs varchar(250),
  GroupID int
)");

      $Ex->Query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  CommentID,
  DiscussionID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

      $Ex->Query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  c.CommentID,
  c.DiscussionID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

      $Ex->Query("update z_pm pm
join z_pmto2 t
  on t.CommentID = pm.CommentID
set pm.UserIDs = t.UserIDs");

      $Ex->Query("drop table if exists z_pmgroup");

      $Ex->Query("create table z_pmgroup (
  GroupID int,
  DiscussionID int,
  UserIDs varchar(250)
)");

      $Ex->Query("insert z_pmgroup (
  GroupID,
  DiscussionID,
  UserIDs
)
select
  min(pm.CommentID),
  pm.DiscussionID,
  t2.UserIDs
from z_pm pm
join z_pmto2 t2
  on pm.CommentID = t2.CommentID
group by pm.DiscussionID, t2.UserIDs");

      $Ex->Query("create index z_idx_pmgroup on z_pmgroup (DiscussionID, UserIDs)");

      $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (GroupID)");

      $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.DiscussionID = g.DiscussionID and pm.UserIDs = g.UserIDs
set pm.GroupID = g.GroupID");

      $Conversation_Map = array(
         'AuthUserID' => 'InsertUserID',
         'DateCreated' => 'DateInserted',
         'DiscussionID' => array('Column' => 'DiscussionID', 'Type' => 'int'),
         'CommentID' => 'ConversationID',
         'Name' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
      );
      $Ex->ExportTable('Conversation',
      "select c.*, d.Name
from :_Comment c
join :_Discussion d
  on d.DiscussionID = c.DiscussionID
join z_pmgroup g
  on g.GroupID = c.CommentID;", $Conversation_Map);
      
      // ConversationMessage.
      $ConversationMessage_Map = array(
         'CommentID' => 'MessageID',
         'GroupID' => 'ConversationID',
         'Body' => 'Body',
         'FormatType' => 'Format',
         'AuthUserID' => 'InsertUserID',
         'DateCreated' => 'DateInserted'
      );
      $Ex->ExportTable('ConversationMessage', 
      "select c.*, pm.GroupID
from z_pm pm
join :_Comment c
  on pm.CommentID = c.CommentID", $ConversationMessage_Map);
      
      // UserConversation
      /*
         'UserID' => 'int', 
         'ConversationID' => 'int', 
         'LastMessageID' => 'int'
      */
      $UserConversation_Map = array(
         'UserID' => 'UserID',
         'GroupID' => 'ConversationID'
      );
      $Ex->ExportTable('UserConversation', 
         "select distinct
  pm.GroupID,
  t.UserID
from z_pmto t
join z_pm pm
  on pm.CommentID = t.CommentID", $UserConversation_Map);

      $Ex->Query("drop table z_pmto");
      $Ex->Query("drop table z_pmto2");
      $Ex->Query("drop table z_pm");
      $Ex->Query("drop table z_pmgroup");

      // Media
      if ($Ex->Exists('Attachment')) {
         $Media_Map = array(
            'AttachmentID' => 'MediaID',
            'Name' => 'Name',
            'MimeType' => 'Type',
            'Size' => 'Size',
            //'StorageMethod',
            'Path' => array('Column' => 'Path', 'Filter' => array($this, 'StripMediaPath')),
            'UserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted',
            'CommentID' => 'ForeignID'
            //'ForeignTable'
          );
         $Ex->ExportTable('Media',
            "select a.*, 'local' as StorageMethod, 'comment' as ForeignTable from :_Attachment a",
            $Media_Map);
      }
         
      // End
      $Ex->EndExport();
   }

   function StripMediaPath($AbsPath) {
      if (($Pos = strpos($AbsPath, '/uploads/')) !== FALSE)
         return substr($AbsPath, $Pos + 9);
      return $AbsPath;
   }

   function FilterPermissions($Permissions, $ColumnName, &$Row) {
      $Permissions2 = unserialize($Permissions);

      foreach ($Permissions2 as $Name => $Value) {
         if (is_null($Value))
            $Permissions2[$Name] = FALSE;
      }

      if (is_array($Permissions2)) {
         $Row = array_merge($Row, $Permissions2);
         $this->Ex->CurrentRow = $Row;
         return isset($Permissions2['PERMISSION_ADD_COMMENTS']) ? $Permissions2['PERMISSION_ADD_COMMENTS'] : FALSE;
      }
      return FALSE;
   }

   function ForceBool($Value) {
      if ($Value)
         return TRUE;
      return FALSE;
   }
}
?>
<?php


/* Contents included from class.vanilla2.php */
?><?php
/**
 * Vanilla 2 exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
 
class Vanilla2 extends ExportController {

   /** @var array Required tables => columns */  
   protected $_SourceTables = array();
   
   /**
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      $Tables = array(
          'Activity',
          'Category',
          'Comment',
          'Conversation',
          'ConversationMessage',
          'Discussion',
          'Media',
          'Permission',
          'Role',
          'User',
          'UserConversation',
          'UserDiscussion',
          'UserMeta',
          'UserRole');

      $Ex->BeginExport('', 'Vanilla 2.*', array('HashMethod' => 'Vanilla'));

      foreach ($Tables as $TableName) {
         $this->ExportTable($Ex, $TableName);
      }

      $Ex->EndExport();
   }

   /**
    *
    * @param ExportModel $Ex
    * @param string $TableName
    */
   protected function ExportTable($Ex, $TableName) {
      // Make sure the table exists.
      if (!$Ex->Exists($TableName))
         return;

      $Ex->ExportTable($TableName, "select * from :_{$TableName}");
   }
   
}
?><?php


/* Contents included from class.vbulletin.php */
?><?php
/**
 * vBulletin exporter tool.
 * 
 * This will migrate all vBulletin data for 3.x and 4.x forums. It even 
 * accounts for attachments created during 2.x and moved to 3.x.
 *
 * Supports the FileUpload, ProfileExtender, and Signature plugins.
 * All vBulletin data appropriate for those plugins will be prepared
 * and transferred.
 *
 * MIGRATING FILES:
 * 
 * 1) Avatars should be moved to the filesystem prior to export if they
 * are stored in the database. Copy all the avatar_* files from
 * vBulletin's /customavatars folder to Vanilla's /upload/userpics.
 * IMPORTANT: Make /userpics writable by the server BEFORE IMPORTING.
 * 
 * 2) Attachments should likewise be moved to the filesystem prior to
 * export. Copy all attachments from vBulletin's attachments folder to 
 * Vanilla's /upload folder without changing the internal folder structure.
 * IMPORTANT: Enable the FileUpload plugin BEFORE IMPORTING.
 *
 * @copyright Vanilla Forums Inc. 2010
 * @author Matt Lincoln Russell lincoln@icrontic.com
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * vBulletin-specific extension of generic ExportController.
 *
 * @package VanillaPorter
 */
class Vbulletin extends ExportController {
   public $AttachSelect = "concat('/vbulletin/', left(f.filehash, 2), '/', f.filehash, '_', f.filedataid,'.', f.extension) as Path";
   public $AvatarSelect = "case when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.'))) else null end as customphoto";
   
   static $Permissions = array(
   
   'genericpermissions' => array(
       1 => array('Garden.Profiles.View', 'Garden.Activity.View'),
       2 => 'Garden.Profiles.Edit',
       1024 => 'Plugins.Signatures.Edit'
       ),
   
   'forumpermissions' => array(
       1 => 'Vanilla.Discussions.View',
       16 => 'Vanilla.Discussions.Add',
       64 => 'Vanilla.Comments.Add',
       4096 => 'Plugins.Attachments.Download',
       8192 => 'Plugins.Attachments.Upload'),
   
   'adminpermissions' => array(
       1 => array('Garden.Moderation.Manage', 'Vanilla.Discussions.Announce', 'Vanilla.Discussions.Close', 'Vanilla.Discussions.Delete', 'Vanilla.Comments.Delete', 'Vanilla.Comments.Edit', 'Vanilla.Discussions.Edit', 'Vanilla.Discussions.Sink', 'Garden.Activity.Delete', 'Garden.Users.Add', 'Garden.Users.Edit', 'Garden.Users.Approve', 'Garden.Users.Delete', 'Garden.Applicants.Manage'),
       2 => array('Garden.Settings.View', 'Garden.Settings.Manage', 'Garden.Routes.Manage', 'Garden.Registration.Manage', 'Garden.Messages.Manage', 'Garden.Email.Manage', 'Vanilla.Categories.Manage', 'Vanilla.Settings.Manage', 'Vanilla.Spam.Manage', 'Garden.Plugins.Manage', 'Garden.Applications.Manage', 'Garden.Themes.Manage', 'Garden.Roles.Manage')
//       4 => 'Garden.Settings.Manage',),
       ),
   
   'wolpermissions' => array(
       16 => 'Plugins.WhosOnline.ViewHidden')
   );
   
   static $Permissions2 = array();
   
   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'user' => array('userid','username','password','email','referrerid','timezoneoffset','posts','salt',
         'birthday_search','joindate','lastvisit','lastactivity','membergroupids','usergroupid',
         'usertitle', 'homepage', 'aim', 'icq', 'yahoo', 'msn', 'skype', 'styleid', 'avatarid'),
      'usergroup'=> array('usergroupid','title','description'),
      'userfield' => array('userid'),
      'phrase' => array('varname','text','product','fieldname','varname'),
      'thread' => array('threadid','forumid','postuserid','title','open','sticky','dateline','lastpost','visible'),
      'deletionlog' => array('type','primaryid'),
      'post' => array('postid','threadid','pagetext','userid','dateline','visible'),
      'forum' => array('forumid','description','displayorder','title','description','displayorder'),
      'subscribethread' => array('userid','threadid')
   );
   
   /**
    * Export each table one at a time.
    *
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      $ForumID = $this->Param('forumid');
      if ($ForumID)
         $ForumWhere = ' and t.forumid '.(strpos($ForumID, ', ') === FALSE ? "= $ForumID" : "in ($ForumID)");
      else
         $ForumWhere = '';
      
      $CharacterSet = $Ex->GetCharacterSet('post');
      if ($CharacterSet)
         $Ex->CharacterSet = $CharacterSet;
      
      $this->ExportBlobs(
         $this->Param('attachments'),
         $this->Param('avatars'),
         $ForumWhere
      );
      
      if ($this->Param('noexport'))
         return;
      
      // Begin
      $Ex->BeginExport('', 'vBulletin 3.* and 4.*');
      
      $Now = time();
      
//      $this->_ExportMedia();
//      $Ex->EndExport();
//      return;
  
      // Users
      $User_Map = array(
         'userid'=>'UserID',
         'username'=>'Name',
         'password2'=>'Password',
         'email'=>'Email',
         'referrerid'=>'InviteUserID',
         'timezoneoffset'=>'HourOffset',
         'salt'=>'char(3)',
         'ipaddress' => 'LastIPAddress'
      );
      
      if ($UseFieAvatar = $this->GetConfig('usefileavatar'))
         $User_Map['filephoto'] = 'Photo';
      else
         $User_Map['customphoto'] = 'Photo';
      
      $Ex->ExportTable('User', "select u.*,
				concat(`password`, salt) as password2,
            DATE_FORMAT(birthday_search,GET_FORMAT(DATE,'ISO')) as DateOfBirth,
            FROM_UNIXTIME(joindate) as DateFirstVisit,
            FROM_UNIXTIME(lastvisit) as DateLastActive,
            FROM_UNIXTIME(joindate) as DateInserted,
            FROM_UNIXTIME(lastactivity) as DateUpdated,
            case when avatarrevision > 0 then concat('userpics/avatar', u.userid, '_', 'avatarrevision', '.gif') else null end  as filephoto,
            {$this->AvatarSelect},
            case when ub.userid is not null then 1 else 0 end as Banned,
            'vbulletin' as HashMethod
         from :_user u
         left join :_customavatar a
         	on u.userid = a.userid
         left join :_userban ub
       	 	on u.userid = ub.userid and ub.liftdate <= now() ", $User_Map);  // ":_" will be replace by database prefix
      
      // Roles
      $Role_Map = array(
         'usergroupid'=>'RoleID',
         'title'=>'Name',
         'description'=>'Description'
      );   
      $Ex->ExportTable('Role', 'select * from :_usergroup', $Role_Map);
    
      // UserRoles
      $UserRole_Map = array(
         'userid'=>'UserID',
         'usergroupid'=>'RoleID'
      );
      $Ex->Query("CREATE TEMPORARY TABLE VbulletinRoles (userid INT UNSIGNED NOT NULL, usergroupid INT UNSIGNED NOT NULL)");
      # Put primary groups into tmp table
      $Ex->Query("insert into VbulletinRoles (userid, usergroupid) select userid, usergroupid from :_user");
      # Put stupid CSV column into tmp table
      $SecondaryRoles = $Ex->Query("select userid, usergroupid, membergroupids from :_user", TRUE);
      if (is_resource($SecondaryRoles)) {
         while (($Row = @mysql_fetch_assoc($SecondaryRoles)) !== false) {
            if($Row['membergroupids']!='') {
               $Groups = explode(',',$Row['membergroupids']);
               foreach($Groups as $GroupID) {
                  $Ex->Query("insert into VbulletinRoles (userid, usergroupid) values({$Row['userid']},{$GroupID})", TRUE);
               }
            }
         }
      }
      # Export from our tmp table and drop
      $Ex->ExportTable('UserRole', 'select distinct userid, usergroupid from VbulletinRoles', $UserRole_Map);
      $Ex->Query("DROP TABLE IF EXISTS VbulletinRoles");
      
      // Permissions.
      $Permissions_Map = array(
          'usergroupid' => 'RoleID',
          'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'SignInPermission')),
          'genericpermissions' => array('Column' => 'GenericPermissions', 'type' => 'int'),
          'forumpermissions' => array('Column' => 'ForumPermissions', 'type' => 'int')
      );
      $this->AddPermissionColumns(self::$Permissions, $Permissions_Map);
      $Ex->ExportTable('Permission', 'select * from :_usergroup', $Permissions_Map);
      
//      $Ex->EndExport();
//      return;


      // UserMeta
      $Ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 64 ) NOT NULL ,`Value` VARCHAR( 255 ) NOT NULL)");
      # Standard vB user data
      $UserFields = array('usertitle' => 'Title', 'homepage' => 'Website', 'aim' => 'AIM', 'icq' => 'ICQ', 'yahoo' => 'Yahoo', 'msn' => 'MSN', 'skype' => 'Skype', 'styleid' => 'StyleID');
      foreach($UserFields as $Field => $InsertAs)
         $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
      # Dynamic vB user data (userfield)
      $ProfileFields = $Ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
      if (is_resource($ProfileFields)) {
         $ProfileQueries = array();
         while ($Field = @mysql_fetch_assoc($ProfileFields)) {
            $Column = str_replace('_title', '', $Field['varname']);
            $Name = preg_replace('/[^a-zA-Z0-9_-\s]/', '', $Field['text']);
            $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
               select userid, 'Profile.".$Name."', ".$Column." from :_userfield where ".$Column." != ''";
         }
         foreach ($ProfileQueries as $Query) {
            $Ex->Query($Query);
         }
      }
      # Get signatures
      $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Sig', signatureparsed from :_sigparsed");
      # Export from our tmp table and drop
      $Ex->ExportTable('UserMeta', 'select * from VbulletinUserMeta');
      $Ex->Query("DROP TABLE IF EXISTS VbulletinUserMeta");

      // Categories
      $Category_Map = array(
         'forumid'=>'CategoryID',
         'description'=>'Description',
         'Name'=>array('Column'=>'Name'), //,'Filter'=>array($Ex, 'HTMLDecoder')),
         'displayorder'=>array('Column'=>'Sort', 'Type'=>'int'),
         'parentid'=>'ParentCategoryID'
      );
      $Ex->ExportTable('Category', "select f.*, left(title,30) as Name
         from :_forum f
         where 1 = 1 $ForumWhere", $Category_Map);
      
      // Discussions
      $Discussion_Map = array(
         'threadid'=>'DiscussionID',
         'forumid'=>'CategoryID',
         'postuserid'=>'InsertUserID',
         'postuserid2'=>'UpdateUserID',
         'title'=>array('Column'=>'Name','Filter'=>array($Ex, 'HTMLDecoder')),
			'Format'=>'Format',
         'views'=>'CountViews',
         'ipaddress' => 'InsertIPAddress'
      );
      
      if ($Ex->Destination == 'database') {
         // Remove the filter from the title so that this doesn't take too long.
         $Ex->HTMLDecoderDb('thread', 'title', 'threadid');
         unset($Discussion_Map['title']['Filter']);
      }
      
      $Ex->ExportTable('Discussion', "select t.*,
				t.postuserid as postuserid2,
            p.ipaddress,
            p.pagetext as Body,
				'BBCode' as Format,
            replycount+1 as CountComments, 
            convert(ABS(open-1),char(1)) as Closed, 
            convert(sticky,char(1)) as Announce,
            FROM_UNIXTIME(t.dateline) as DateInserted,
            FROM_UNIXTIME(lastpost) as DateUpdated,
            FROM_UNIXTIME(lastpost) as DateLastComment
         from :_thread t
            left join :_deletionlog d on (d.type='thread' and d.primaryid=t.threadid)
				left join :_post p on p.postid = t.firstpostid
         where d.primaryid is null
            and t.visible = 1
            $ForumWhere", $Discussion_Map);
      
      // Comments
      $Comment_Map = array(
         'postid' => 'CommentID',
         'threadid' => 'DiscussionID',
         'pagetext' => 'Body',
			'Format' => 'Format',
         'ipaddress' => 'InsertIPAddress'
      );
      $Ex->ExportTable('Comment', "select p.*,
				'BBCode' as Format,
            p.userid as InsertUserID,
            p.userid as UpdateUserID,
         FROM_UNIXTIME(p.dateline) as DateInserted,
            FROM_UNIXTIME(p.dateline) as DateUpdated
         from :_post p
         inner join :_thread t 
            on p.threadid = t.threadid
         left join :_deletionlog d 
            on (d.type='post' and d.primaryid=p.postid)
         where p.postid <> t.firstpostid 
            and d.primaryid is null
            and p.visible = 1
            $ForumWhere", $Comment_Map);
      
      // UserDiscussion
      $Ex->ExportTable('UserDiscussion', "select 
            st.userid as UserID,
            st.threadid as DiscussionID,
            '1' as Bookmarked,
            FROM_UNIXTIME(tr.readtime) as DateLastViewed
         from :_subscribethread st
         left join :_threadread tr on tr.userid = st.userid and tr.threadid = st.threadid");
      /*$Ex->ExportTable('UserDiscussion', "select
           tr.userid as UserID,
           tr.threadid as DiscussionID,
           FROM_UNIXTIME(tr.readtime) as DateLastViewed,
           case when st.threadid is not null then 1 else 0 end as Bookmarked
         from :_threadread tr
         left join :_subscribethread st on tr.userid = st.userid and tr.threadid = st.threadid");*/
      
      // Activity (from visitor messages in vBulletin 3.8+)
      if ($Ex->Exists('visitormessage')) {
         $Activity_Map = array(
            'postuserid'=>'RegardingUserID',
            'userid'=>'ActivityUserID',
            'pagetext'=>'Story',
         );
         $Ex->ExportTable('Activity', "select *, 
               '{RegardingUserID,you} &rarr; {ActivityUserID,you}' as HeadlineFormat,
               FROM_UNIXTIME(dateline) as DateInserted,
               INET_NTOA(ipaddress) as InsertIPAddress,
               postuserid as InsertUserID,
               -1 as NotifiyUserID,
               'WallPost' as ActivityType
   			from :_visitormessage
   			where state='visible'", $Activity_Map);
      }

      // Massage PMs into Conversations.
      
      $Ex->Query('drop table if exists z_pmto');
      $Ex->Query('create table z_pmto (
        pmtextid int unsigned,
        userid int unsigned,
        primary key(pmtextid, userid)
      )');

      $Ex->Query('insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        userid
      from :_pm;');

      $Ex->Query('insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        fromuserid
      from :_pmtext;');

      $Ex->Query('insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.userid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid;');

      $Ex->Query('insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.touserid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid;');

      $Ex->Query('drop table if exists z_pmto2;');
      $Ex->Query('create table z_pmto2 (
        pmtextid int unsigned,
        userids varchar(250),
        primary key (pmtextid)
      );');

      $Ex->Query('insert z_pmto2 (
        pmtextid,
        userids
      )
      select
        pmtextid,
        group_concat(userid order by userid)
      from z_pmto t
      group by t.pmtextid;');

      $Ex->Query('drop table if exists z_pmtext;');
      $Ex->Query('create table z_pmtext (
        pmtextid int unsigned,
        title varchar(250),
        title2 varchar(250),
        userids varchar(250),
        group_id int unsigned
      );');

      $Ex->Query("insert z_pmtext (
        pmtextid,
        title,
        title2
      )
      select
        pmtextid,
        title,
        case when title like 'Re: %' then trim(substring(title, 4)) else title end as title2
      from :_pmtext pm;");

      $Ex->Query('create index z_idx_pmtext on z_pmtext (pmtextid);');

      $Ex->Query('update z_pmtext pm
      join z_pmto2 t
        on pm.pmtextid = t.pmtextid
      set pm.userids = t.userids;');

      // A conversation is a group of pmtexts with the same title and same users.

      $Ex->Query('drop table if exists z_pmgroup;');
      $Ex->Query('create table z_pmgroup (
        group_id int unsigned,
        title varchar(250),
        userids varchar(250)
      );');

      $Ex->Query('insert z_pmgroup (
        group_id,
        title,
        userids
      )
      select
        min(pm.pmtextid),
        pm.title2,
        t2.userids
      from z_pmtext pm
      join z_pmto2 t2
        on pm.pmtextid = t2.pmtextid
      group by pm.title2, t2.userids;');

      $Ex->Query('create index z_idx_pmgroup on z_pmgroup (title, userids);');
      $Ex->Query('create index z_idx_pmgroup2 on z_pmgroup (group_id);');

      $Ex->Query('update z_pmtext pm
      join z_pmgroup g
        on pm.title2 = g.title and pm.userids = g.userids
      set pm.group_id = g.group_id;');

      // Conversations.
      $Conversation_Map = array(
         'pmtextid' => 'ConversationID',
         'fromuserid' => 'InsertUserID',
         'title2' => array('Column' => 'Subject', 'Type' => 'varchar(250)')
      );
      $Ex->ExportTable('Conversation', 
      'select
         pm.*,
         g.title as title2,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmgroup g
         on g.group_id = pm.pmtextid', $Conversation_Map);

      // Coversation Messages.
      $ConversationMessage_Map = array(
          'pmtextid' => 'MessageID',
          'group_id' => 'ConversationID',
          'message' => 'Body',
          'fromuserid' => 'InsertUserID'
      );
      $Ex->ExportTable('ConversationMessage',
      "select
         pm.*,
         pm2.group_id,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmtext pm2
         on pm.pmtextid = pm2.pmtextid", $ConversationMessage_Map);

      // User Conversation.
      $UserConversation_Map = array(
         'userid' => 'UserID',
         'group_id' => 'ConversationID'
      );
      $Ex->ExportTable('UserConversation',
      "select
         g.group_id,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.group_id = t.pmtextid;", $UserConversation_Map);

      $Ex->Query('drop table if exists z_pmto');
      $Ex->Query('drop table if exists z_pmto2;');
      $Ex->Query('drop table if exists z_pmtext;');
      $Ex->Query('drop table if exists z_pmgroup;');
      
      // Media
      if ($Ex->Exists('attachment')) {
         $this->_ExportMedia();
      }
      
      // End
      $Ex->EndExport();
      
      
   }
   
   function ExportBlobs($Attachments = TRUE, $CustomAvatars = TRUE) {
      $Ex = $this->Ex;
      
      if ($Attachments) {
         $Sql = "select 
            f.filedata, 
            {$this->AttachSelect}
            from :_filedata f";
         $Ex->ExportBlobs($Sql, 'filedata', 'Path');
      }
      
      if ($CustomAvatars) {
         $Sql = "select 
               a.filedata, 
               {$this->AvatarSelect}
            from :_customavatar a
            ";
         $Sql = str_replace('u.userid', 'a.userid', $Sql);
         $Ex->ExportBlobs($Sql, 'filedata', 'customphoto', 80);
      }
      
   }
   
   function _ExportMedia() {
      $Ex = $this->Ex;
      
      if ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === TRUE) {
         $Ex->Query('create index ix_thread_firstpostid on :_thread (firstpostid)');
         
         $Media_Map = array(
             'attachmentid' => 'MediaID',
             'filename' => 'Name',
             'filesize' => 'Size',
             'width' => 'ImageWidth',
             'height' => 'ImageHeight',
             'userid' => 'InsertUserID'
             );
         
         $Ex->ExportTable('Media', "select 
            case when t.threadid is not null then 'discussion' when ct.class = 'Post' then 'comment' when ct.class = 'Thread' then 'discussion' else ct.class end as ForeignTable,
            case when t.threadid is not null then t.threadid else a.contenttypeid end as ForeignID,
            {$this->AttachSelect},
            concat('image/', f.extension) as Type,
            FROM_UNIXTIME(a.dateline) as DateInserted,
            'local' as StorageMethod,
            a.*,
            f.extension, f.filesize,
            f.width, f.height
         from :_attachment a
         join :_contenttype ct
            on a.contenttypeid = ct.contenttypeid
         join :_filedata f
            on f.filedataid = a.filedataid
         left join :_thread t
            on t.firstpostid = a.contentid and a.contenttypeid = 1
         where a.contentid > 0", $Media_Map);
      } else {
         $this->_ExportMediaOld();
      }
   }
   
   function _ExportMediaOld() {   
      $Ex = $this->Ex;
      
      $Media_Map = array(
         'attachmentid' => 'MediaID',
         'filename' => 'Name',
         'extension' => array('Column' => 'Type', 'Filter' => array($this, 'BuildMimeType')),
         'filesize' => 'Size',
         'filehash' => array('Column' => 'Path', 'Filter' => array($this, 'BuildMediaPath')),
         'userid' => 'InsertUserID'
      );
      // Test if hash field exists from 2.x
      $AttachColumns = array('hash', 'filehash', 'filesize');
      $Missing = $Ex->Exists('attachment', $AttachColumns);
      $AttachColumnsString = '';
      foreach ($AttachColumns as $ColumnName) {
         if (in_array($ColumnName, $Missing)) {
            $AttachColumnsString .= ", null as $ColumnName";
         } else {
            $AttachColumnsString .= ", a.$ColumnName";
         }
      }

      // A) Do NOT grab every field to avoid potential 'filedata' blob.
      // B) We must left join 'attachment' because we can't left join 'thread' on firstpostid (not an index).
      // C) We lie about the height & width to spoof FileUpload serving generic thumbnail if they aren't set.

      // First comment attachments => 'Discussion' foreign key
      $Extension = ExportModel::FileExtension('a.filename');
      $Ex->ExportTable('Media',
         "select a.attachmentid, a.filename, $Extension as extension $AttachColumnsString, a.userid,
            'local' as StorageMethod, 
            'discussion' as ForeignTable,
            t.threadid as ForeignID,
            FROM_UNIXTIME(a.dateline) as DateInserted,
            '1' as ImageHeight,
            '1' as ImageWidth
         from :_thread t
            left join :_attachment a ON a.postid = t.firstpostid
         where a.attachmentid > 0

         union all

         select a.attachmentid, a.filename, $Extension $AttachColumnsString a.userid,
            'local' as StorageMethod, 
            'comment' as ForeignTable,
            a.postid as ForeignID,
            FROM_UNIXTIME(a.dateline) as DateInserted,
            '1' as ImageHeight,
            '1' as ImageWidth
         from :_post p
            inner join :_thread t ON p.threadid = t.threadid
            left join :_attachment a ON a.postid = p.postid
         where p.postid <> t.firstpostid and  a.attachmentid > 0
         ", $Media_Map);
   }
   
   /**
    * Filter used by $Media_Map to build attachment path.
    *
    * vBulletin 3.0+ organizes its attachments by descending 1 level per digit
    * of the userid, named as the attachmentid with a '.attach' extension.
    * Example: User #312's attachments would be in the directory /3/1/2.
    *
    * In vBulletin 2.x, files were stored as an md5 hash in the root
    * attachment directory with a '.file' extension. Existing files were not 
    * changed when upgrading to 3.x so older forums will need those too.
    *
    * This assumes the user is going to copy their entire attachments directory
    * into Vanilla's /uploads folder and then use our custom plugin to convert
    * file extensions.
    *
    * @access public
    * @see ExportModel::_ExportTable
    * 
    * @param string $Value Ignored.
    * @param string $Field Ignored.
    * @param array $Row Contents of the current attachment record.
    * @return string Future path to file.
    */
   function BuildMediaPath($Value, $Field, $Row) {
      if (isset($Row['hash']) && $Row['hash'] != '') { 
         // Old school! (2.x)
         return $Row['hash'].'.file';//.$Row['extension'];
      }
      else { // Newer than 3.0
         // Build user directory path
         $n = strlen($Row['userid']);
         $DirParts = array();
         for($i = 0; $i < $n; $i++) {
            $DirParts[] = $Row['userid']{$i};
         }
         return implode('/', $DirParts).'/'.$Row['attachmentid'].'.attach';//.$Row['extension'];
      }
   }
   
   /**
    * Set valid MIME type for images.
    * 
    * @access public
    * @see ExportModel::_ExportTable
    * 
    * @param string $Value Extension from vBulletin.
    * @param string $Field Ignored.
    * @param array $Row Ignored.
    * @return string Extension or accurate MIME type.
    */
   function BuildMimeType($Value, $Field, $Row) {
      switch ($Value) {
         case 'jpg':
         case 'gif':
         case 'png':
            $Value = 'image/'.$Value;
            break;
      }
      return $Value;
   }
   
   /**
    * Create Photo path from avatar data.
    * 
    * @access public
    * @see ExportModel::_ExportTable
    * 
    * @param string $Value Ignored.
    * @param string $Field Ignored.
    * @param array $Row Contents of the current attachment record.
    * @return string Path to avatar if one exists, or blank if none.
    */
//   function BuildAvatar($Value, $Field, $Row) {
//      if ($Row['avatarrevision'] > 0)
//         return 'userpics/avatar' . $Row['userid'] . '_' . $Row['avatarrevision'] . '.gif';
//      else
//         return '';
//   }
   
   function SignInPermission($Value, $Field, $Row) {
      $Result = TRUE;
      if (stripos($Row['title'], 'unregistered') !== FALSE)
         $Result = FALSE;
      elseif (stripos($Row['title'], 'banned') !== FALSE)
         $Result = FALSE;
      
      return $Result;
   }
   
   function GetConfig($Name) {
      $Sql = "select * from :_setting where varname = 'usefileavatar'";
      $Result = $this->Ex->Query($Sql, TRUE);
      if ($Row = mysql_fetch_assoc($Result)) {
         return $Row['value'];
      }
      return FALSE;
   }
   
   function FilterPermissions($Value, $Field, $Row) {
      if (!isset(self::$Permissions2[$Field]))
         return 0;
      
      $Column = self::$Permissions2[$Field][0];
      $Mask = self::$Permissions2[$Field][1];
      
      $Value = ($Row[$Column] & $Mask) == $Mask;
      return $Value;
   }
   
   function AddPermissionColumns($ColumnGroups, &$Map) {
      $Permissions2 = array();
      
      foreach ($ColumnGroups as $ColumnGroup => $Columns) {
         foreach ($Columns as $Mask => $ColumnArray) {
            $ColumnArray = (array)$ColumnArray;
            foreach ($ColumnArray as $Column) {
               $Map[$Column] = array('Column' => $Column, 'Type' => 'tinyint(1)', 'Filter' => array($this, 'FilterPermissions'));
               
               $Permissions2[$Column] = array($ColumnGroup, $Mask);
            }
         }
      }
      self::$Permissions2 = $Permissions2;
   }
}
?><?php


/* Contents included from class.phpbb2.php */
?><?php
/**
 * phpBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class Phpbb2 extends ExportController {

   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'users' => array('user_id', 'username', 'user_password', 'user_email', 'user_timezone', 'user_posts', 'user_regdate', 'user_lastvisit'),
      'groups' => array('group_id', 'group_name', 'group_description'),
      'user_group' => array('user_id', 'group_id'),
      'forums' => array('forum_id', 'forum_name', 'forum_desc', 'forum_order'),
      'topics' => array('topic_id', 'forum_id', 'topic_poster',  'topic_title', 'topic_views', 'topic_first_post_id', 'topic_replies', 'topic_status', 'topic_type', 'topic_time'),
      'posts' => array('post_id', 'topic_id', 'poster_id', 'post_time', 'post_edit_time'),
      'posts_text' => array('post_id', 'post_text'),
      'privmsgs' => array('privmsgs_id', 'privmsgs_subject', 'privmsgs_from_userid', 'privmsgs_to_userid', 'privmsgs_date'),
      'privmsgs_text' => array('privmsgs_text_id', 'privmsgs_bbcode_uid', 'privmsgs_text')
   );

   /**
    * Forum-specific export format.
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      // Begin
      $Ex->BeginExport('', 'phpBB 2.*', array('HashMethod' => 'phpBB'));

      // Users
      $User_Map = array(
         'user_id'=>'UserID',
         'username'=>'Name',
         'user_password'=>'Password',
         'user_email'=>'Email',
         'user_timezone'=>'HourOffset',
         'user_posts'=>array('Column' => 'CountComments', 'Type' => 'int')
      );
      $Ex->ExportTable('User', "select *,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted
         from :_users", $User_Map);  // ":_" will be replace by database prefix


      // Roles
      $Role_Map = array(
         'group_id'=>'RoleID',
         'group_name'=>'Name',
         'group_description'=>'Description'
      );
      // Skip single-user groups
      $Ex->ExportTable('Role', 'select * from :_groups where group_single_user = 0', $Role_Map);


      // UserRoles
      $UserRole_Map = array(
         'user_id'=>'UserID',
         'group_id'=>'RoleID'
      );
      // Skip pending memberships
      $Ex->ExportTable('UserRole', 'select user_id, group_id from :_users
         union
         select user_id, group_id from :_user_group where user_pending = 0', $UserRole_Map);

      // Categories
      $Category_Map = array(
         'id'=>'CategoryID',
         'cat_title'=>'Name',
         'description'=>'Description',
         'parentid' => 'ParentCategoryID'
      );
      $Ex->ExportTable('Category',
"select
  c.cat_id * 1000 as id,
  c.cat_title,
  c.cat_order * 1000 as Sort,
  null as parentid,
  '' as description
from :_categories c

union all

select
  f.forum_id,
  f.forum_name,
  c.cat_order * 1000 + f.forum_order,
  c.cat_id * 1000 as parentid,
  f.forum_desc
from :_forums f
left join :_categories c
  on f.cat_id = c.cat_id", $Category_Map);

      // Discussions
      $Discussion_Map = array(
         'topic_id'=>'DiscussionID',
         'forum_id'=>'CategoryID',
         'topic_poster'=>'InsertUserID',
         'topic_title'=>'Name',
         'Format'=>'Format',
         'topic_views'=>'CountViews'
      );
      $Ex->ExportTable('Discussion', "select t.*,
        'BBCode' as Format,
         case t.topic_status when 1 then 1 else 0 end as Closed,
         case t.topic_type when 1 then 1 else 0 end as Announce,
         FROM_UNIXTIME(t.topic_time) as DateInserted
        from :_topics t",
        $Discussion_Map);

      // Comments
      $Comment_Map = array(
         'post_id' => 'CommentID',
         'topic_id' => 'DiscussionID',
         'post_text' => array('Column'=>'Body','Filter'=>array($this, 'RemoveBBCodeUIDs')),
         'Format' => 'Format',
         'poster_id' => 'InsertUserID'
      );
      $Ex->ExportTable('Comment', "select p.*, pt.post_text, pt.bbcode_uid,
        'BBCode' as Format,
         FROM_UNIXTIME(p.post_time) as DateInserted,
         FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
         from :_posts p inner join :_posts_text pt on p.post_id = pt.post_id",
         $Comment_Map);

      // Conversations tables.
      $Ex->Query("drop table if exists z_pmto;");

      $Ex->Query("create table z_pmto (
id int unsigned,
userid int unsigned,
primary key(id, userid));");

      $Ex->Query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_from_userid
from :_privmsgs;");

      $Ex->Query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_to_userid
from :_privmsgs;");

      $Ex->Query("drop table if exists z_pmto2;");

      $Ex->Query("create table z_pmto2 (
  id int unsigned,
  userids varchar(250),
  primary key (id)
);");

      $Ex->Query("insert ignore z_pmto2 (id, userids)
select
  id,
  group_concat(userid order by userid)
from z_pmto
group by id;");

      $Ex->Query("drop table if exists z_pm;");

      $Ex->Query("create table z_pm (
  id int unsigned,
  subject varchar(255),
  subject2 varchar(255),
  userids varchar(250),
  groupid int unsigned
);");

      $Ex->Query("insert z_pm (
  id,
  subject,
  subject2,
  userids
)
select
  pm.privmsgs_id,
  pm.privmsgs_subject,
  case when pm.privmsgs_subject like 'Re: %' then trim(substring(pm.privmsgs_subject, 4)) else pm.privmsgs_subject end as subject2,
  t.userids
from :_privmsgs pm
join z_pmto2 t
  on t.id = pm.privmsgs_id;");

      $Ex->Query("create index z_idx_pm on z_pm (id);");

      $Ex->Query("drop table if exists z_pmgroup;");

      $Ex->Query("create table z_pmgroup (
  groupid int unsigned,
  subject varchar(255),
  userids varchar(250)
);");

      $Ex->Query("insert z_pmgroup (
  groupid,
  subject,
  userids
)
select
  min(pm.id),
  pm.subject2,
  pm.userids
from z_pm pm
group by pm.subject2, pm.userids;");

      $Ex->Query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
      $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

      $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.subject2 = g.subject and pm.userids = g.userids
set pm.groupid = g.groupid;");

      // Conversations.
      $Conversation_Map = array(
         'privmsgs_id' => 'ConversationID',
         'privmsgs_from_userid' => 'InsertUserID',
         'RealSubject' => array('Column' => 'Subject', 'Type' => 'varchar(250)', 'Filter' => array('Phpbb2', 'EntityDecode'))
      );

      $Ex->ExportTable('Conversation', "select
  g.subject as RealSubject,
  pm.*,
  from_unixtime(pm.privmsgs_date) as DateInserted
from :_privmsgs pm
join z_pmgroup g
  on g.groupid = pm.privmsgs_id", $Conversation_Map);

      // Coversation Messages.
      $ConversationMessage_Map = array(
          'privmsgs_id' => 'MessageID',
          'group_id' => 'ConversationID',
          'privmsgs_text' => array('Column' => 'Body', 'Filter'=>array($this, 'RemoveBBCodeUIDs')),
          'privmsgs_from_userid' => 'InsertUserID'
      );
      $Ex->ExportTable('ConversationMessage',
      "select
         pm.*,
         txt.*,
         txt.privmsgs_bbcode_uid as bbcode_uid,
         pm2.groupid,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.privmsgs_date) as DateInserted
       from :_privmsgs pm
       join :_privmsgs_text txt
         on pm.privmsgs_id = txt.privmsgs_text_id
       join z_pm pm2
         on pm.privmsgs_id = pm2.id", $ConversationMessage_Map);

      // User Conversation.
      $UserConversation_Map = array(
         'userid' => 'UserID',
         'groupid' => 'ConversationID'
      );
      $Ex->ExportTable('UserConversation',
      "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $UserConversation_Map);

      $Ex->Query('drop table if exists z_pmto');
      $Ex->Query('drop table if exists z_pmto2;');
      $Ex->Query('drop table if exists z_pm;');
      $Ex->Query('drop table if exists z_pmgroup;');

      // End
      $Ex->EndExport();
   }

   public static function EntityDecode($Value) {
      return html_entity_decode($Value, ENT_QUOTES, 'UTF-8');
   }

   public function RemoveBBCodeUIDs($Value, $Field, $Row) {
      $UID = $Row['bbcode_uid'];
      return str_replace(':'.$UID, '', $Value);
   }
}
?>
<?php


/* Contents included from class.phpbb3.php */
?><?php
/**
 * phpBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class Phpbb3 extends ExportController {

   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'users' => array('user_id', 'username', 'user_password', 'user_email', 'user_timezone', 'user_posts', 'user_regdate', 'user_lastvisit', 'user_regdate'),
      'groups' => array('group_id', 'group_name', 'group_desc'),
      'user_group' => array('user_id', 'group_id'),
      'forums' => array('forum_id', 'forum_name', 'forum_desc', 'left_id', 'parent_id'),
      'topics' => array('topic_id', 'forum_id', 'topic_poster',  'topic_title', 'topic_views', 'topic_first_post_id', 'topic_replies', 'topic_status', 'topic_type', 'topic_time', 'topic_last_post_time', 'topic_last_post_time'),
      'posts' => array('post_id', 'topic_id', 'post_text', 'poster_id', 'post_edit_user', 'post_time', 'post_edit_time'),
      'bookmarks' => array('user_id', 'topic_id')
   );

   /**
    * Forum-specific export format.
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      // Begin
      $Ex->BeginExport('', 'phpBB 3.*', array('HashMethod' => 'phpBB'));

      // Users
      $User_Map = array(
         'user_id'=>'UserID',
         'username'=>'Name',
         'user_password'=>'Password',
         'user_email'=>'Email',
         'user_timezone'=>'HourOffset',
         'user_posts'=>array('Column' => 'CountComments', 'Type' => 'int')
      );
      $Ex->ExportTable('User', "select *,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted
         from :_users", $User_Map);  // ":_" will be replace by database prefix


      // Roles
      $Role_Map = array(
         'group_id'=>'RoleID',
         'group_name'=>'Name',
         'group_desc'=>'Description'
      );
      $Ex->ExportTable('Role', 'select * from :_groups', $Role_Map);


      // UserRoles
      $UserRole_Map = array(
         'user_id'=>'UserID',
         'group_id'=>'RoleID'
      );
      $Ex->ExportTable('UserRole', 'select user_id, group_id from :_users
         union
         select user_id, group_id from :_user_group', $UserRole_Map);

      // Categories
      $Category_Map = array(
         'forum_id'=>'CategoryID',
         'forum_name'=>'Name',
         'forum_desc'=>'Description',
         'left_id'=>'Sort'
      );
      $Ex->ExportTable('Category', "select *,
         nullif(parent_id,0) as ParentCategoryID
         from :_forums", $Category_Map);

      // Discussions
      $Discussion_Map = array(
         'topic_id'=>'DiscussionID',
         'forum_id'=>'CategoryID',
         'topic_poster'=>'InsertUserID',
         'topic_title'=>'Name',
			'Format'=>'Format',
         'topic_views'=>'CountViews',
         'topic_first_post_id'=>array('Column'=>'FirstCommentID','Type'=>'int')
      );
      $Ex->ExportTable('Discussion', "select t.*,
				'BBCode' as Format,
            topic_replies+1 as CountComments,
            case t.topic_status when 1 then 1 else 0 end as Closed,
            case t.topic_type when 1 then 1 else 0 end as Announce,
            FROM_UNIXTIME(t.topic_time) as DateInserted,
            FROM_UNIXTIME(t.topic_last_post_time) as DateUpdated,
            FROM_UNIXTIME(t.topic_last_post_time) as DateLastComment
         from :_topics t", $Discussion_Map);

      // Comments
      $Comment_Map = array(
         'post_id' => 'CommentID',
         'topic_id' => 'DiscussionID',
         'post_text' => array('Column'=>'Body','Filter'=>array($this, 'RemoveBBCodeUIDs')),
			'Format' => 'Format',
         'poster_id' => 'InsertUserID',
         'post_edit_user' => 'UpdateUserID'
      );
      $Ex->ExportTable('Comment', "select p.*,
				'BBCode' as Format,
            FROM_UNIXTIME(p.post_time) as DateInserted,
            FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
         from :_posts p", $Comment_Map);

      // UserDiscussion
		$UserDiscussion_Map = array(
			'user_id' =>  'UserID',
         'topic_id' => 'DiscussionID');
      $Ex->ExportTable('UserDiscussion', "select b.*,
         1 as Bookmarked
         from :_bookmarks b", $UserDiscussion_Map);

      // Conversations tables.

      $Ex->Query("drop table if exists z_pmto;");

      $Ex->Query("create table z_pmto (
id int unsigned,
userid int unsigned,
primary key(id, userid));");

      $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, author_id
from :_privmsgs;");

      $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, user_id
from :_privmsgs_to;");

      $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, author_id
from :_privmsgs_to;");

      $Ex->Query("drop table if exists z_pmto2;");

      $Ex->Query("create table z_pmto2 (
  id int unsigned,
  userids varchar(250),
  primary key (id)
);");

      $Ex->Query("insert ignore z_pmto2 (id, userids)
select
  id,
  group_concat(userid order by userid)
from z_pmto
group by id;");

      $Ex->Query("drop table if exists z_pm;");

      $Ex->Query("create table z_pm (
  id int unsigned,
  subject varchar(255),
  subject2 varchar(255),
  userids varchar(250),
  groupid int unsigned
);");

      $Ex->Query("insert z_pm (
  id,
  subject,
  subject2,
  userids
)
select
  pm.msg_id,
  pm.message_subject,
  case when pm.message_subject like 'Re: %' then trim(substring(pm.message_subject, 4)) else pm.message_subject end as subject2,
  t.userids
from :_privmsgs pm
join z_pmto2 t
  on t.id = pm.msg_id;");

      $Ex->Query("create index z_idx_pm on z_pm (id);");

      $Ex->Query("drop table if exists z_pmgroup;");

      $Ex->Query("create table z_pmgroup (
  groupid int unsigned,
  subject varchar(255),
  userids varchar(250)
);");

      $Ex->Query("insert z_pmgroup (
  groupid,
  subject,
  userids
)
select
  min(pm.id),
  pm.subject2,
  pm.userids
from z_pm pm
group by pm.subject2, pm.userids;");

      $Ex->Query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
      $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

      $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.subject2 = g.subject and pm.userids = g.userids
set pm.groupid = g.groupid;");

      // Conversations.
      $Conversation_Map = array(
         'msg_id' => 'ConversationID',
         'author_id' => 'InsertUserID',
         'RealSubject' => array('Column' => 'Subject', 'Type' => 'varchar(250)', 'Filter' => array('Phpbb2', 'EntityDecode'))
      );

      $Ex->ExportTable('Conversation', "select
  g.subject as RealSubject,
  pm.*,
  from_unixtime(pm.message_time) as DateInserted
from :_privmsgs pm
join z_pmgroup g
  on g.groupid = pm.msg_id", $Conversation_Map);

      // Coversation Messages.
      $ConversationMessage_Map = array(
          'msg_id' => 'MessageID',
          'groupid' => 'ConversationID',
          'message_text' => array('Column' => 'Body', 'Filter'=>array($this, 'RemoveBBCodeUIDs')),
          'author_id' => 'InsertUserID'
      );
      $Ex->ExportTable('ConversationMessage',
      "select
         pm.*,
         pm2.groupid,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.message_time) as DateInserted
       from :_privmsgs pm
       join z_pm pm2
         on pm.msg_id = pm2.id", $ConversationMessage_Map);

      // User Conversation.
      $UserConversation_Map = array(
         'userid' => 'UserID',
         'groupid' => 'ConversationID'
      );
      $Ex->ExportTable('UserConversation',
      "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $UserConversation_Map);

      $Ex->Query('drop table if exists z_pmto');
      $Ex->Query('drop table if exists z_pmto2;');
      $Ex->Query('drop table if exists z_pm;');
      $Ex->Query('drop table if exists z_pmgroup;');

      // Media.
      $Media_Map = array(
          'attach_id' => 'MediaID',
          'real_filename' => 'Name',
          'post_id' => 'InsertUserID',
          'mimetype' => 'Type',
          'filesize' => 'Size',
      );
      $Ex->ExportTable('Media', 
      "select
  case when a.post_msg_id = t.topic_first_post_id then 'discussion' else 'comment' end as ForeignTable,
  case when a.post_msg_id = t.topic_first_post_id then a.topic_id else a.post_msg_id end as ForeignID,
  concat ('FileUpload/', a.physical_filename) as Path,
  FROM_UNIXTIME(a.filetime) as DateInserted,
  'local' as StorageMethod,
  a.*
from :_attachments a
join :_topics t
  on a.topic_id = t.topic_id", $Media_Map);

      // End
      $Ex->EndExport();
   }

   public function RemoveBBCodeUIDs($Value, $Field, $Row) {
      $UID = $Row['bbcode_uid'];
      return str_replace(':'.$UID, '', $Value);
   }
}
?><?php


/* Contents included from class.bbpress.php */
?><?php
/**
 * bbPress exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
class BbPress extends ExportController {
   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'forums' => array(),
      'posts' => array(),
      'topics' => array(),
      'users' => array('ID', 'user_login', 'user_pass', 'user_email', 'user_registered'),
      'meta' => array()
   );
   
   /**
    * Forum-specific export format.
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      // Begin
      $Ex->BeginExport('', 'bbPress 1.*', array('HashMethod' => 'Vanilla'));

      // Users
      $User_Map = array(
         'ID'=>'UserID',
         'user_login'=>'Name',
         'user_pass'=>'Password',
         'user_email'=>'Email',
         'user_registered'=>'DateInserted'
      );
      $Ex->ExportTable('User', "select * from :_users", $User_Map);  // ":_" will be replace by database prefix

      // Roles
      $Ex->ExportTable('Role', 
         "select 1 as RoleID, 'Guest' as Name
         union select 2, 'Key Master'
         union select 3, 'Administrator'
         union select 4, 'Moderator'
         union select 5, 'Member'
         union select 6, 'Inactive'
         union select 7, 'Blocked'");

      // UserRoles
      $UserRole_Map = array(
         'user_id'=>'UserID'
      );
      $Ex->ExportTable('UserRole', 
         "select distinct
           user_id,
           case when locate('keymaster', meta_value) <> 0 then 2
           when locate('administrator', meta_value) <> 0 then 3
           when locate('moderator', meta_value) <> 0 then 4
           when locate('member', meta_value) <> 0 then 5
           when locate('inactive', meta_value) <> 0 then 6
           when locate('blocked', meta_value) <> 0 then 7
           else 1 end as RoleID
         from :_usermeta
         where meta_key = 'bb_capabilities'", $UserRole_Map);

      // Categories
      $Category_Map = array(
         'forum_id'=>'CategoryID',
         'forum_name'=>'Name',
         'forum_desc'=>'Description',
         'form_slug'=>'UrlCode',
         'left_order'=>'Sort'
      );
      $Ex->ExportTable('Category', "select *,
         nullif(forum_parent,0) as ParentCategoryID
         from :_forums", $Category_Map);

      // Discussions
      $Discussion_Map = array(
         'topic_id'=>'DiscussionID',
         'forum_id'=>'CategoryID',
         'topic_poster'=>'InsertUserID',
         'topic_title'=>'Name',
			'Format'=>'Format',
         'topic_start_time'=>'DateInserted',
         'topic_sticky'=>'Announce'
      );
      $Ex->ExportTable('Discussion', "select t.*,
				'Html' as Format,
            case t.topic_open when 0 then 1 else 0 end as Closed
         from :_topics t", $Discussion_Map);

      // Comments
      $Comment_Map = array(
         'post_id' => 'CommentID',
         'topic_id' => 'DiscussionID',
         'post_text' => 'Body',
			'Format' => 'Format',
         'Body' => array('Column'=>'Body','Filter'=>'bbPressTrim'),
         'poster_id' => 'InsertUserID',
         'post_time' => 'DateInserted'
      );
      $Ex->ExportTable('Comment', "select p.*,
				'Html' as Format
         from :_posts p", $Comment_Map);

      // Conversations.

      // The export is different depending on the table layout.
      $PM = $Ex->Exists('bbpm', array('ID', 'pm_title', 'pm_from', 'pm_to', 'pm_text', 'sent_on', 'pm_thread'));
      $ConversationVersion = '';

      if ($PM === TRUE) {
         // This is from an old version of the plugin.
         $ConversationVersion = 'old';
      } elseif (is_array($PM) && count(array_intersect(array('ID', 'pm_from', 'pm_text', 'sent_on', 'pm_thread'), $PM)) == 0) {
         // This is from a newer version of the plugin.
         $ConversationVersion = 'new';
      }

      if ($ConversationVersion) {
         // Conversation.
         $Conv_Map = array(
            'pm_thread' => 'ConversationID',
            'pm_from' => 'InsertUserID'
         );
         $Ex->ExportTable('Conversation',
            "select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm
            where thread_depth = 0", $Conv_Map);

         // ConversationMessage.
         $ConvMessage_Map = array(
            'ID' => 'MessageID',
            'pm_thread' => 'ConversationID',
            'pm_from' => 'InsertUserID',
            'pm_text' => array('Column'=>'Body','Filter'=>'bbPressTrim')
         );
         $Ex->ExportTable('ConversationMessage',
            'select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm', $ConvMessage_Map);

         // UserConversation.
         $Ex->Query("create temporary table bbpmto (UserID int, ConversationID int)");

         if ($ConversationVersion == 'new') {
            $To = $Ex->Query("select object_id, meta_value from bb_meta where object_type = 'bbpm_thread' and meta_key = 'to'", TRUE);
            if (is_resource($To)) {
               while (($Row = @mysql_fetch_assoc($To)) !== false) {
                  $Thread = $Row['object_id'];
                  $Tos = explode(',', trim($Row['meta_value'], ','));
                  $ToIns = '';
                  foreach ($Tos as $ToID) {
                     $ToIns .= "($ToID,$Thread),";
                  }
                  $ToIns = trim($ToIns, ',');

                  $Ex->Query("insert bbpmto (UserID, ConversationID) values $ToIns", TRUE);
               }
               mysql_free_result($To);

               $Ex->ExportTable('UserConversation', 'select * from bbpmto');
            }
         } else {
            $ConUser_Map = array(
                'pm_thread' => 'ConversationID',
                'pm_from' => 'UserID'
            );
            $Ex->ExportTable('UserConversation',
               'select distinct
                 pm_thread,
                 pm_from,
                 del_sender as Deleted
               from bb_bbpm

               union

               select distinct
                 pm_thread,
                 pm_to,
                 del_reciever
               from bb_bbpm', $ConUser_Map);
         }
      }

      // End
      $Ex->EndExport();
   }
}

function bbPressTrim($Text) {
   return rtrim(bb_code_trick_reverse($Text));
}

function bb_code_trick_reverse( $text ) {
   $text = preg_replace_callback("!(<pre><code>|<code>)(.*?)(</code></pre>|</code>)!s", 'bb_decodeit', $text);
   $text = str_replace(array('<p>', '<br />'), '', $text);
   $text = str_replace('</p>', "\n", $text);
   $text = str_replace('<coded_br />', '<br />', $text);
   $text = str_replace('<coded_p>', '<p>', $text);
   $text = str_replace('</coded_p>', '</p>', $text);
   return $text;
}

function bb_decodeit( $matches ) {
	$text = $matches[2];
	$trans_table = array_flip(get_html_translation_table(HTML_ENTITIES));
	$text = strtr($text, $trans_table);
	$text = str_replace('<br />', '<coded_br />', $text);
	$text = str_replace('<p>', '<coded_p>', $text);
	$text = str_replace('</p>', '</coded_p>', $text);
	$text = str_replace(array('&#38;','&amp;'), '&', $text);
	$text = str_replace('&#39;', "'", $text);
	if ( '<pre><code>' == $matches[1] )
		$text = "\n$text\n";
	return "`$text`";
}
?><?php


/* Contents included from class.simplepress.php */
?><?php
/**
 * ppPress exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class SimplePress extends ExportController {

   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'sfforums' => array(),
      'sfposts' => array(),
      'sftopics' => array(),
      'users' => array('ID', 'user_nicename', 'user_pass', 'user_email', 'user_registered')
      //'meta' => array()
   );

   /**
    * Forum-specific export format.
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      // Begin
      $Ex->BeginExport('', 'SimplePress 1.*', array('HashMethod' => 'Vanilla'));

      // Users
      $User_Map = array(
         'user_id'=>'UserID',
         'display_name'=>'Name',
         'user_pass'=>'Password',
         'user_email'=>'Email',
         'user_registered'=>'DateInserted'
      );
      $Ex->ExportTable('User', 
         "select m.*, u.user_pass, u.user_email
          from :_users u
          join :_sfmembers m
            on u.ID = m.user_id", $User_Map);  // ":_" will be replace by database prefix

      // Roles
      $Role_Map = array(
          'usergroup_id' => 'RoleID',
          'usergroup_name' => 'Name',
          'usergroup_desc' => 'Description'
      );
      $Ex->ExportTable('Role',
         "select * from :_sfusergroups", $Role_Map);

      // UserRoles
      $UserRole_Map = array(
         'user_id'=>'UserID',
         'usergroup_id'=>'RoleID'
      );
      $Ex->ExportTable('UserRole',
         "select * from :_sfmemberships", $UserRole_Map);

      // Categories
      $Category_Map = array(
         'forum_id'=>'CategoryID',
         'forum_name'=>'Name',
         'forum_desc'=>'Description',
         'form_slug'=>'UrlCode'
      );
      $Ex->ExportTable('Category', "select *,
         nullif(parent,0) as ParentCategoryID
         from :_sfforums", $Category_Map);

      // Discussions
      $Discussion_Map = array(
         'topic_id'=>'DiscussionID',
         'forum_id'=>'CategoryID',
         'user_id'=>'InsertUserID',
         'topic_name'=>'Name',
			'Format'=>'Format',
         'topic_date'=>'DateInserted',
         'topic_pinned'=>'Announce'
      );
      $Ex->ExportTable('Discussion', "select t.*,
				'Html' as Format
         from :_sftopics t", $Discussion_Map);

      // Comments
      $Comment_Map = array(
         'post_id' => 'CommentID',
         'topic_id' => 'DiscussionID',
         'post_content' => 'Body',
			'Format' => 'Format',
         'user_id' => 'InsertUserID',
         'post_date' => 'DateInserted'
      );
      $Ex->ExportTable('Comment', "select p.*,
				'Html' as Format
         from :_sfposts p", $Comment_Map);

      // Conversation.
      $Conv_Map = array(
         'message_id' => 'ConversationID',
         'from_id' => 'InsertUserID',
         'sent_date' => 'DateInserted'
      );
      $Ex->ExportTable('Conversation',
         "select *
         from :_sfmessages
         where is_reply = 0", $Conv_Map);

      // ConversationMessage.
      $ConvMessage_Map = array(
         'message_id' => 'MessageID',
         'from_id' => 'InsertUserID',
         'message' => array('Column'=>'Body')
      );
      $Ex->ExportTable('ConversationMessage',
         'select c.message_id as ConversationID, m.*
         from :_sfmessages c
         join :_sfmessages m
           on (m.is_reply = 0 and m.message_id = c.message_id) or (m.is_reply = 1 and c.is_reply = 0 and m.message_slug = c.message_slug and m.from_id in (c.from_id, c.to_id) and m.to_id in (c.from_id, c.to_id));',
         $ConvMessage_Map);

      // UserConversation
      $UserConv_Map = array(
         'message_id' => 'ConversationID',
         'from_id' => 'UserID'
      );
      $Ex->ExportTable('UserConversation',
         'select message_id, from_id
         from :_sfmessages
         where is_reply = 0

         union

         select message_id, to_id
         from :_sfmessages
         where is_reply = 0',
         $UserConv_Map);

      // End
      $Ex->EndExport();
   }
}
?><?php


/* Contents included from class.smf.php */
?><?php
/* Written by John Crenshaw for Priacta, Inc. */

/**
 * SMF exporter tool
 *
 * @copyright Priacta, Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class SMF extends ExportController {

   /** @var array Required tables => columns */
   protected $SourceTables = array(
      'boards' => array(),
      'messages' => array(),
      'personal_messages' => array(),
      'pm_recipients' => array(),
      'categories' => array('ID_CAT', 'name', 'catOrder'),
      'membergroups' => array(),
      'members' => array('ID_MEMBER', 'memberName', 'passwd', 'emailAddress', 'dateRegistered')
   );
   
   /**
    * Forum-specific export format.
    * @param ExportModel $Ex
    */
   protected function ForumExport($Ex) {
      // Begin
      $Ex->BeginExport('', 'SMF 1.*', array('HashMethod' => 'Django'));

      // Users
      $User_Map = array(
         'ID_MEMBER'=>'UserID',
         'memberName'=>'Name',
         'password'=>'Password',
         'emailAddress'=>'Email',
         'DateInserted'=>'DateInserted',
         'timeOffset'=>'HourOffset',
         'posts'=>'CountComments',
         'avatar'=>'Photo',
         'birthdate'=>'DateOfBirth',
         'DateFirstVisit'=>'DateFirstVisit',
         'DateLastActive'=>'DateLastActive',
         'DateUpdated'=>'DateUpdated'
      );
      $Ex->ExportTable('User', "
         select *,
            from_unixtime(dateRegistered) as DateInserted,
            from_unixtime(dateRegistered) as DateFirstVisit,
            from_unixtime(lastLogin) as DateLastActive,
            from_unixtime(lastLogin) as DateUpdated,
            concat('sha1$', lower(memberName), '$', passwd) as `password`
         from :_members", $User_Map);

      // Roles
      $Role_Map = array(
         'ID_GROUP'=>'RoleID',
         'groupName'=>'Name'
      );
      $Ex->ExportTable('Role', "select * from :_membergroups", $Role_Map);

      // UserRoles
      $UserRole_Map = array(
         'ID_MEMBER'=>'UserID',
		 'ID_GROUP'=>'RoleID'
      );
      $Ex->ExportTable('UserRole', "select * from :_members", $UserRole_Map);

      // Categories
      $Category_Map = array(
          'Name' => array('Column' => 'Name', 'Filter' => array($this, 'DecodeNumericEntity'))
      );

      $Ex->ExportTable('Category',
	  "
      select
        (`ID_CAT` + 1000000) as `CategoryID`,
        `name` as `Name`,
		'' as `Description`,
		null as `ParentCategoryID`,
        `catOrder` as `Sort`
      from :_categories

	  union

      select
        b.`ID_BOARD` as `CategoryID`,

        b.`name` as `Name`,
		  b.`description` as `Description`,
		(CASE WHEN b.`ID_PARENT` = 0 THEN (`ID_CAT` + 1000000) ELSE `ID_PARENT` END) as `ParentCategoryID`,
        b.`boardOrder` as `Sort`
      from :_boards b

	  ", $Category_Map);

      // Discussions
      $Discussion_Map = array(
         'ID_TOPIC' => 'DiscussionID',
         'subject' => array('Column'=>'Name', 'Filter' => array($this, 'DecodeNumericEntity')), //,'Filter'=>'bb2html'),
         'body' => array('Column'=>'Body'), //,'Filter'=>'bb2html'),
         'Format'=>'Format',
         'ID_BOARD'=> 'CategoryID',
         'DateInserted'=>'DateInserted',
         'DateUpdated'=>'DateUpdated',
         'ID_MEMBER'=>'InsertUserID',
         'DateLastComment'=>'DateLastComment',
         'UpdateUserID'=>'UpdateUserID',
         'locked'=>'Closed',
         'isSticky'=>'Announce',
         'CountComments'=>'CountComments',
         'numViews'=>'CountViews',
         'LastCommentUserID'=>'LastCommentUserID',
         'ID_LAST_MSG'=>'LastCommentID'
      );
      $Ex->ExportTable('Discussion', "
      select t.*,
         (t.numReplies + 1) as CountComments,
         m.subject,
         m.body,
         from_unixtime(m.posterTime) as DateInserted,
         from_unixtime(m.modifiedTime) as DateUpdated,
         m.ID_MEMBER,
         from_unixtime(m_end.posterTime) AS DateLastComment,
         m_end.ID_MEMBER AS UpdateUserID,
         m_end.ID_MEMBER AS LastCommentUserID,
         'BBCode' as Format
       from :_topics t
       join :_messages as m on t.ID_FIRST_MSG = m.ID_MSG
       join :_messages as m_end on t.ID_LAST_MSG = m_end.ID_MSG

		 -- where t.spam = 0 AND m.spam = 0;

		 ", $Discussion_Map);

      // Comments
      $Comment_Map = array(
         'ID_MSG' => 'CommentID',
         'ID_TOPIC' => 'DiscussionID',
         'Format' => 'Format',
         'body' => array('Column'=>'Body'), //,'Filter'=>'bb2html'),
         'ID_MEMBER' => 'InsertUserID',
         'DateInserted' => 'DateInserted'
      );
      $Ex->ExportTable('Comment', 
      "select m.*,
         from_unixtime(m.posterTime) AS DateInserted,
         'BBCode' as Format
       from :_messages m
		 join :_topics t on m.ID_TOPIC = t.ID_TOPIC
		 where m.ID_MSG <> t.ID_FIRST_MSG;
       ", $Comment_Map);

    // Conversations need a bit more conversion so execute a series of queries for that.
    $Ex->Query('create table :_smfpmto (
  id int,
  to_id int,
  deleted tinyint,
  primary key(id, to_id)
)');

    $Ex->Query('insert :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER_FROM,
  deletedBySender
from :_personal_messages');

    $Ex->Query('insert ignore :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER,
  deleted
from :_pm_recipients');

    $Ex->Query('create table :_smfpmto2 (
  id int,
  to_ids varchar(255),
  primary key(id)
)');

    $Ex->Query('insert :_smfpmto2 (
  id,
  to_ids
)
select
  id,
  group_concat(to_id order by to_id)
from :_smfpmto
group by id');

    $Ex->Query('create table :_smfpm (
  id int,
  group_id int,
  subject varchar(200),
  subject2 varchar(200),
  from_id int,
  to_ids varchar(255))');

    $Ex->Query('create index :_idx_smfpm2 on :_smfpm (subject2, from_id)');
    $Ex->Query('create index :_idx_smfpmg on :_smfpm (group_id)');

    $Ex->Query('insert :_smfpm (
  id,
  subject,
  subject2,
  from_id,
  to_ids
)
select
  ID_PM,
  subject,
  case when subject like \'Re: %\' then trim(substring(subject, 4)) else subject end as subject2,
  ID_MEMBER_FROM,
  to2.to_ids
from :_personal_messages pm
join :_smfpmto2 to2
  on pm.ID_PM = to2.id');

    $Ex->Query('create table :_smfgroups (
  id int primary key,
  subject2 varchar(200),
  to_ids varchar(255)
)');

    $Ex->Query('insert :_smfgroups
select
  min(id) as group_id, subject2, to_ids
from :_smfpm
group by subject2, to_ids');

    $Ex->Query('create index :_idx_smfgroups on :_smfgroups (subject2, to_ids)');

    $Ex->Query('update :_smfpm pm
join :_smfgroups g
  on pm.subject2 = g.subject2 and pm.to_ids = g.to_ids
set pm.group_id = g.id');

	 // Conversation.
	 $Conv_Map = array(
		'id' => 'ConversationID',
		'from_id' => 'InsertUserID',
		'DateInserted' => 'DateInserted',
      'subject2' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
	 );
	 $Ex->ExportTable('Conversation',
"select
  pm.group_id,
  pm.from_id,
  pm.subject2,
  from_unixtime(pm2.msgtime) as DateInserted
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM
where pm.id = pm.group_id", $Conv_Map);

	 // ConversationMessage.
	 $ConvMessage_Map = array(
		'id' => 'MessageID',
		'group_id' => 'ConversationID',
		'DateInserted' => 'DateInserted',
		'from_id' => 'InsertUserID',
		'body' => array('Column'=>'Body')
	 );
	 $Ex->ExportTable('ConversationMessage',
"select
  pm.id,
  pm.group_id,
  from_unixtime(pm2.msgtime) as DateInserted,
  pm.from_id,
  'BBCode' as Format,
  case when pm.subject = pm.subject2 then concat(pm.subject, '\n\n', pm2.body) else pm2.body end as body
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM", $ConvMessage_Map);

	 // UserConversation.
	 $UserConv_Map = array(
		'to_id' => 'UserID',
		'group_id' => 'ConversationID',
      'deleted' => 'Deleted'
	 );
	 $Ex->ExportTable('UserConversation',

"select
   pm.group_id,
   t.to_id,
   t.deleted
 from :_smfpmto t
 join :_smfpm pm
   on t.id = pm.group_id", $UserConv_Map);
    
      $Ex->Query('drop table :_smfpm');
      $Ex->Query('drop table :_smfpmto');
      $Ex->Query('drop table :_smfpmto2');
      $Ex->Query('drop table :_smfgroups');

      // End
      $Ex->EndExport();
//      echo implode("\n\n", $Ex->Queries);
   }

   function DecodeNumericEntity($Text) {
      if (function_exists('mb_decode_numericentity')) {
         $convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);
         return mb_decode_numericentity($Text, $convmap, 'UTF-8');
      } else {
         return $Text;
      }
   }

   function _pcreEntityToUtf($matches) {
     $char = intval(is_array($matches) ? $matches[1] : $matches);

     if ($char < 0x80) {
         // to prevent insertion of control characters
         if ($char >= 0x20)
            return htmlspecialchars(chr($char));
         else
            return "&#$char;";
     } else if ($char < 0x80000) {
         return chr(0xc0 | (0x1f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
     } else {
         return chr(0xe0 | (0x0f & ($char >> 12))) . chr(0x80 | (0x3f & ($char >> 6))). chr(0x80 | (0x3f & $char));
     }
   }
}
?><?php


/* Contents included from class.punbb.php */
?><?php
/**
 * Punbb exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

class Punbb extends ExportController {

   /** @var array Required tables => columns */  
   public $SourceTables = array(
      );
   
   /**
    * Forum-specific export format
    * @todo Project file size / export time and possibly break into multiple files
    * @param ExportModel $Ex
    * 
    */
   protected function ForumExport($Ex) {

      $Ex->BeginExport('', 'PunBB 1.*', array('HashMethod' => 'punbb'));
      
      // User.
      $User_Map = array(
          'id' => 'UserID',
          'username' => 'Name',
          'email' => 'Email',
          'timezone' => 'HourOffset',
          'registration_ip' => 'InsertIPAddress',
          'PasswordHash' => 'Password');
      $Ex->ExportTable('User', "
         select 
           u.*, 
           concat(u.password, '$', u.salt) as PasswordHash, 
           from_unixtime(registered) as DateInserted, 
           from_unixtime(last_visit) as DateLastActive
         from :_users u
         where group_id <> 2", $User_Map);
      
      // Role.
      $Role_Map = array(
          'g_id' => 'RoleID',
          'g_title' => 'Name'
          );
      $Ex->ExportTable('Role', "select * from :_groups", $Role_Map);
      
      // Permission.
      $Permission_Map = array(
          'g_id' => 'RoleID',
          'g_modertor' => 'Garden.Moderation.Manage',
          'g_mod_edit_users' => 'Garden.Users.Edit',
          'g_mod_rename_users' => 'Garden.Users.Delete',
          'g_read_board' => 'Vanilla.Discussions.View',
          'g_view_users' => 'Garden.Profiles.View',
          'g_post_topics' => 'Vanilla.Discussions.Add',
          'g_post_replies' => 'Vanilla.Comments.Add',
          'g_pun_attachment_allow_download' => 'Plugins.Attachments.Download.Allow',
          'g_pun_attachment_allow_upload' => 'Plugins.Attachments.Upload.Allow',
          
          );
      $Permission_Map = $Ex->FixPermissionColumns($Permission_Map);
      $Ex->ExportTable('Permission', "
      select
         g.*,
         g_post_replies as `Garden.SignIn.Allow`,
         g_mod_edit_users as `Garden.Users.Add`,
         case when g_title = 'Administrators' then 'All' else null end as _Permissions
      from :_groups g", $Permission_Map);
      
      // UserRole.
      $UserRole_Map = array(
          'id' => 'UserID',
          'group_id' => 'RoleID'
      );
      $Ex->ExportTable('UserRole',
         "select
            case u.group_id when 2 then 0 else id end as id,
            u.group_id
          from :_users u", $UserRole_Map);
      
      // Signatures.
      $Ex->ExportTable('UserMeta', "
         select
         id,
         'Plugin.Signatures.Sig' as Name,
         signature
      from :_users u
      where u.signature is not null", array('id ' => 'UserID', 'signature' => 'Value'));
      
      
      // Category.
      $Category_Map = array(
          'id' => 'CategoryID',
          'forum_name' => 'Name',
          'forum_desc' => 'Description',
          'disp_position' => 'Sort',
          'parent_id' => 'ParentCategoryID'
          );
      $Ex->ExportTable('Category', "
      select
        id,
        forum_name,
        forum_desc,
        disp_position,
        cat_id * 1000 as parent_id
      from punbb_forums f
      union

      select
        id * 1000,
        cat_name,
        '',
        disp_position,
        null
      from punbb_categories", $Category_Map);
      
      // Discussion.
      $Discussion_Map = array(
          'id' => 'DiscussionID',
          'poster_id' => 'InsertUserID',
          'poster_ip' => 'InsertIPAddress',
          'closed' => 'Closed',
          'sticky' => 'Announce',
          'forum_id' => 'CategoryID',
          'subject' => 'Name',
          'message' => 'Body'
          
          );
      $Ex->ExportTable('Discussion', "
      select t.*, 
        from_unixtime(p.posted) as DateInserted, 
        p.poster_id, 
        p.poster_ip,
        p.message,
        from_unixtime(p.edited) as DateUpdated, 
        eu.id as UpdateUserID,
        'BBCode' as Format
      from punbb_topics t
      left join punbb_posts p
        on t.first_post_id = p.id
      left join punbb_users eu
        on eu.username = p.edited_by", $Discussion_Map);
      
      // Comment.
      $Comment_Map = array(
          'id' => 'CommentID',
          'topic_id' => 'DiscussionID',
          'poster_id' => 'InsertUserID',
          'poster_ip' => 'InsertIPAddress',
          'message' => 'Body'
      );
      $Ex->ExportTable('Comment', "
            select p.*, 
        'BBCode' as Format,
        from_unixtime(p.posted) as DateInserted,
        from_unixtime(p.edited) as DateUpdated, 
        eu.id as UpdateUserID
      from punbb_topics t
      join punbb_posts p
        on t.id = p.topic_id
      left join punbb_users eu
        on eu.username = p.edited_by
      where p.id <> t.first_post_id;", $Comment_Map);
      
      // Tag.
      $Tag_Map = array(
          'id' => 'TagID',
          'tag' => 'Name');
      $Ex->ExportTable('Tag', "select * from :_tags", $Tag_Map);
      
      // TagDisucssion.
      $TagDiscussionMap = array(
          'topic_id' => 'DiscussionID',
          'tag_id' => 'TagID');
      $Ex->ExportTable('TagDiscussion', "select * from :_topic_tags", $TagDiscussionMap);
      
      // Media.
      $Media_Map = array(
         'id' => 'MediaID',
         'filename' => 'Name',
         'file_mime_type' => 'Type',
         'size' => 'Size',
         'owner_id' => 'InsertUserID'
       );
      $Ex->ExportTable('Media', "
      select f.*,
         concat('FileUpload/', f.file_path) as Path,
         from_unixtime(f.uploaded_at) as DateInserted,
         case when post_id is null then 'Discussion' else 'Comment' end as ForeignTable,
         coalesce(post_id, topic_id) as ForieignID
      from :_attach_files f", $Media_Map);
      
      
      // End
      $Ex->EndExport();
   }

   function StripMediaPath($AbsPath) {
      if (($Pos = strpos($AbsPath, '/uploads/')) !== FALSE)
         return substr($AbsPath, $Pos + 9);
      return $AbsPath;
   }

   function FilterPermissions($Permissions, $ColumnName, &$Row) {
      $Permissions2 = unserialize($Permissions);

      foreach ($Permissions2 as $Name => $Value) {
         if (is_null($Value))
            $Permissions2[$Name] = FALSE;
      }

      if (is_array($Permissions2)) {
         $Row = array_merge($Row, $Permissions2);
         $this->Ex->CurrentRow = $Row;
         return isset($Permissions2['PERMISSION_ADD_COMMENTS']) ? $Permissions2['PERMISSION_ADD_COMMENTS'] : FALSE;
      }
      return FALSE;
   }

   function ForceBool($Value) {
      if ($Value)
         return TRUE;
      return FALSE;
   }
}
?>
<?php


/* Contents included from class.kunena.php */
?><?php
/**
 * Joomla Kunena exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['kunena'] = array('name'=> 'Joomla Kunena', 'prefix'=>'jos_');

class Kunena extends ExportController {
   /**
    * @param ExportModel $Ex 
    */
   public function ForumExport($Ex) {
      $Ex->DestPrefix = 'jos';
      
      $Ex->BeginExport('', 'Joomla Kunena', array('HashMethod' => 'joomla'));
      
      // User.
      $User_Map = array(
         'id'=>'UserID',
         'name'=>'Name',
         'email'=>'Email',
         'registerDate'=>'DateInserted',
         'lastvisitDate'=>'DateLastActive',
         'password' => 'Password',
         'showemail'=>'ShowEmail',
         'birthdate'=>'DateOfBirth',
         'banned'=>'Banned',
//         'DELETED'=>'Deleted',
         'admin'=>array('Column'=>'Admin','Type'=>'tinyint(1)'),
         'Photo'=>'Photo'
      );
      $Ex->ExportTable('User', "
         SELECT 
            u.*, 
            case when ku.avatar <> '' then concat('kunena/avatars/', ku.avatar) else null end as `Photo`,
            case u.usertype when 'superadministrator' then 1 else 0 end as admin,
            coalesce(ku.banned, 0) as banned,
            ku.birthdate,
            !ku.hideemail as showemail
         FROM jos_users u 
         left join jos_kunena_users ku 
            on ku.userid = u.id", $User_Map);
      
      // Role.
      $Role_Map = array(
         'rank_id'=>'RoleID',
         'rank_title'=>'Name',
      );
      $Ex->ExportTable('Role', "select * from jos_kunena_ranks", $Role_Map);
      
      // UserRole.
      $UserRole_Map = array(
          'id' => 'UserID',
          'rank' => 'RoleID');
      $Ex->ExportTable('UserRole', "
         select *
         from jos_users u", $UserRole_Map);
      
      // Permission.
//      $Ex->ExportTable('Permission',
//      "select 2 as RoleID, 'View' as _Permissions
//      union
//      select 3 as RoleID, 'View' as _Permissions
//      union
//      select 16 as RoleID, 'All' as _Permissions", array('_Permissions' => array('Column' => '_Permissions', 'Type' => 'varchar(20)')));

      // Category.
      $Category_Map = array(
          'id' => 'CategoryID',
          'parent' => 'ParentCategoryID',
          'name' => 'Name',
          'ordering' => 'Sort',
          'description' => 'Description',
          
      );
      $Ex->ExportTable('Category', "
         select * from jos_kunena_categories", $Category_Map);
      
      // Discussion.
      $Discussion_Map = array(
          'id' => 'DiscussionID',
          'catid' => 'CategoryID',
          'userid' => 'InsertUserID',
          'subject' => array('Column' => 'Name', 'Filter' => array($Ex, 'HTMLDecoder')),
          'time' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
          'ip' => 'InsertIPAddress',
          'locked' => 'Closed',
          'hits' => 'CountViews',
          'modified_by' => 'UpdateUserID',
          'modified_time' => array('Column' => 'DateUpdated', 'Filter' => array($Ex, 'TimestampToDate')),
          'message' => 'Body',
          'Format' => 'Format'
          );
      $Ex->ExportTable('Discussion', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from jos_kunena_messages t
         left join jos_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread = t.id", $Discussion_Map);
      
      // Comment.
      $Comment_Map = array(
          'id' => 'CommentID',
          'thread' => 'DiscussionID',
          'userid' => 'InsertUserID',
          'time' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
          'ip' => 'InsertIPAddress',
          'modified_by' => 'UpdateUserID',
          'modified_time' => array('Column' => 'DateUpdated', 'Filter' => array($Ex, 'TimestampToDate')),
          'message' => 'Body',
          'Format' => 'Format'
          );
      $Ex->ExportTable('Comment', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from jos_kunena_messages t
         left join jos_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread <> t.id", $Comment_Map);
      
      // UserDiscussion.
      $UserDiscussion_Map = array(
          'thread' => 'DiscussionID',
          'userid' => 'UserID');
      $Ex->ExportTable('UserDiscussion', "
         select t.*, 1 as Bookmarked
         from jos_kunena_subscriptions t", $UserDiscussion_Map);
      
      // Media.
      $Media_Map = array(
          'id' => 'MediaID',
          'mesid' => 'ForeignID',
          'userid' => 'InsertUserID',
          'size' => 'Size',
          'path2' => array('Column' => 'Path', 'Filter' => array($Ex, 'UrlDecode')),
          'filetype' => 'Type',
          'filename' => array('Column' => 'Name', 'Filter' => array($Ex, 'UrlDecode')),
          'time' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
          );
      $Ex->ExportTable('Media', "
         select
            a.*,
            concat(a.folder, '/', a.filename) as path2,
            'local' as StorageMethod,
            case when m.id = m.thread then 'discussion' else 'comment' end as ForeignTable,
            m.time
         from jos_kunena_attachments a
         join jos_kunena_messages m
            on m.id = a.mesid", $Media_Map);
      
      $Ex->EndExport();
   }
}
?><?php


// Include any misc porters that haven't been included yet.
$Paths = glob(dirname(__FILE__).'/class.*.php');
foreach ($Paths as $Path) {
   include_once $Path;
}

// Make sure a default time zone is set
if (ini_get('date.timezone') == '')
   date_default_timezone_set('America/Montreal');


if (PHP_SAPI == 'cli')
   define('CONSOLE', TRUE);

if (defined('CONSOLE')) {
   ParseCommandLine($argv);
}

if (isset($_GET['type'])) {
   $CustomType = $_GET['type'];
   if (!isset($Supported[$CustomType])) {
      $Path = 'class.'.strtolower($CustomType).'.php';
      if (file_exists($Path)) {
         $Supported[$CustomType] = array('name' => $CustomType.' (custom)', 'prefix' => '');
         include_once($Path);
      }
   }
}

// Instantiate the appropriate controller or display the input page.
if(isset($_POST['type']) && array_key_exists($_POST['type'], $Supported)) {
   // Mini-Factory
   $class = ucwords($_POST['type']);
   $Controller = new $class();
   $Controller->DoExport();
}
else {
   $CanWrite = TestWrite();
   ViewForm(array('Supported' => $Supported, 'CanWrite' => $CanWrite));
}

if (defined('CONSOLE'))
   echo "\n";

function ErrorHandler() {
   echo "Error";
}

set_error_handler("ErrorHandler");

/**
 * Write out a value passed as bytes to its most readable format.
 */
function FormatMemorySize($Bytes, $Precision = 1) {
   $Units = array('B', 'K', 'M', 'G', 'T');

   $Bytes = max((int)$Bytes, 0);
   $Pow = floor(($Bytes ? log($Bytes) : 0) / log(1024));
   $Pow = min($Pow, count($Units) - 1);

   $Bytes /= pow(1024, $Pow);

   $Result = round($Bytes, $Precision).$Units[$Pow];
   return $Result;
}

function ParseCommandLine($Argv) {
   global $Supported;

   $Args = array(
       'type' => 'The type of forum being exported ('.implode(', ', array_keys($Supported)).').',
       'prefix' => 'The database table prefix.',
       'dbhost' => 'The database host.',
       'dbname' => 'The database name.',
       'dbuser' => 'The database user.',
       'dbpass' => 'The database password.',
       'savefile' => 'Whether or not to save the file.');

   $Script = $Argv[0];
   unset($Argv[0]);

   if (count($Argv) == 0) {
      echo "usage: php $Script parm1=value ...\n";
      foreach ($Args as $Name => $Help) {
         echo " $Name: $Help\n";
      }

      die();
   }

   $Errors = 0;
   foreach ($Argv as $Arg) {
      $Parts = explode('=', $Arg, 2);
      if (count($Parts) < 2) {
         echo "Malformed argument $Arg.\n";
         $Errors++;
         continue;
      }

      list($Name, $Value) = $Parts;

      $_POST[$Name] = $Value;
      unset($Args[$Name]);
   }
   if (count($Args) > 0) {
      $Errors++;
      echo "Missing arguments: ".implode(', ', array_keys($Args));
   }
   if ($Errors)
      die("\n$Errors error(s)\n");
}

/** 
 * Test filesystem permissions 
 */  
function TestWrite() {
   // Create file
   $file = 'vanilla2test.txt';
   @touch($file);
   if(is_writable($file)) {
      @unlink($file);
      return true;
   }
   else return false;
}
?>
